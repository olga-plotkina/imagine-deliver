(()=>{"use strict";var e={89:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i="",s=void 0!==t[5];return t[4]&&(i+="@supports (".concat(t[4],") {")),t[2]&&(i+="@media ".concat(t[2]," {")),s&&(i+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),i+=e(t),s&&(i+="}"),t[2]&&(i+="}"),t[4]&&(i+="}"),i})).join("")},t.i=function(e,i,s,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var n={};if(s)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(n[l]=!0)}for(var p=0;p<e.length;p++){var d=[].concat(e[p]);s&&n[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),i&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=i):d[2]=i),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},492:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},963:e=>{e.exports=function(e){var t=e[1],i=e[3];if(!i)return t;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},105:(e,t,i)=>{i.d(t,{A:()=>u});var s=i(963),r=i.n(s),a=i(89),n=i.n(a),o=i(492),l=i.n(o),p=new URL(i(85),i.b),d=n()(r()),c=l()(p);d.push([e.id,`@font-face{font-family:"swiper-icons";src:url(${c});font-weight:400;font-style:normal}:root{--swiper-theme-color: #007aff}:host{position:relative;display:block;margin-left:auto;margin-right:auto;z-index:1}.swiper{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1;display:block}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;transition-timing-function:var(--swiper-wrapper-transition-timing-function, initial);box-sizing:content-box}.swiper-android .swiper-slide,.swiper-ios .swiper-slide,.swiper-wrapper{transform:translate3d(0px, 0, 0)}.swiper-horizontal{touch-action:pan-y}.swiper-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform;display:block}.swiper-slide-invisible-blank{visibility:hidden}.swiper-autoheight,.swiper-autoheight .swiper-slide{height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-backface-hidden .swiper-slide{transform:translateZ(0);-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-3d.swiper-css-mode .swiper-wrapper{perspective:1200px}.swiper-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-3d{perspective:1200px}.swiper-3d .swiper-slide,.swiper-3d .swiper-cube-shadow{transform-style:preserve-3d}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-css-mode.swiper-horizontal>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-css-mode.swiper-vertical>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-css-mode.swiper-free-mode>.swiper-wrapper{scroll-snap-type:none}.swiper-css-mode.swiper-free-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:none}.swiper-css-mode.swiper-centered>.swiper-wrapper::before{content:"";flex-shrink:0;order:9999}.swiper-css-mode.swiper-centered>.swiper-wrapper>.swiper-slide{scroll-snap-align:center center;scroll-snap-stop:always}.swiper-css-mode.swiper-centered.swiper-horizontal>.swiper-wrapper>.swiper-slide:first-child{margin-inline-start:var(--swiper-centered-offset-before)}.swiper-css-mode.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;min-height:1px;width:var(--swiper-centered-offset-after)}.swiper-css-mode.swiper-centered.swiper-vertical>.swiper-wrapper>.swiper-slide:first-child{margin-block-start:var(--swiper-centered-offset-before)}.swiper-css-mode.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;min-width:1px;height:var(--swiper-centered-offset-after)}.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-slide-shadow-bottom{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-3d .swiper-slide-shadow{background:rgba(0,0,0,.15)}.swiper-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;box-sizing:border-box;border:4px solid var(--swiper-preloader-color, var(--swiper-theme-color));border-radius:50%;border-top-color:rgba(0,0,0,0)}.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader{animation:swiper-preloader-spin 1s infinite linear}.swiper-lazy-preloader-white{--swiper-preloader-color: #fff}.swiper-lazy-preloader-black{--swiper-preloader-color: #000}@keyframes swiper-preloader-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.swiper-virtual .swiper-slide{-webkit-backface-visibility:hidden;transform:translateZ(0)}.swiper-virtual.swiper-css-mode .swiper-wrapper::after{content:"";position:absolute;left:0;top:0;pointer-events:none}.swiper-virtual.swiper-css-mode.swiper-horizontal .swiper-wrapper::after{height:1px;width:var(--swiper-virtual-size)}.swiper-virtual.swiper-css-mode.swiper-vertical .swiper-wrapper::after{width:1px;height:var(--swiper-virtual-size)}:root{--swiper-navigation-size: 44px}.swiper-button-prev,.swiper-button-next{position:absolute;top:var(--swiper-navigation-top-offset, 50%);width:calc(var(--swiper-navigation-size)/44*27);height:var(--swiper-navigation-size);margin-top:calc(0px - var(--swiper-navigation-size)/2);z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color, var(--swiper-theme-color))}.swiper-button-prev.swiper-button-disabled,.swiper-button-next.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-prev.swiper-button-hidden,.swiper-button-next.swiper-button-hidden{opacity:0;cursor:auto;pointer-events:none}.swiper-navigation-disabled .swiper-button-prev,.swiper-navigation-disabled .swiper-button-next{display:none !important}.swiper-button-prev svg,.swiper-button-next svg{width:100%;height:100%;object-fit:contain;transform-origin:center}.swiper-rtl .swiper-button-prev svg,.swiper-rtl .swiper-button-next svg{transform:rotate(180deg)}.swiper-button-prev,.swiper-rtl .swiper-button-next{left:var(--swiper-navigation-sides-offset, 10px);right:auto}.swiper-button-next,.swiper-rtl .swiper-button-prev{right:var(--swiper-navigation-sides-offset, 10px);left:auto}.swiper-button-lock{display:none}.swiper-button-prev:after,.swiper-button-next:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none !important;letter-spacing:0;font-variant:initial;line-height:1}.swiper-button-prev:after,.swiper-rtl .swiper-button-next:after{content:"prev"}.swiper-button-next,.swiper-rtl .swiper-button-prev{right:var(--swiper-navigation-sides-offset, 10px);left:auto}.swiper-button-next:after,.swiper-rtl .swiper-button-prev:after{content:"next"}.swiper-pagination{position:absolute;text-align:center;transition:300ms opacity;transform:translate3d(0, 0, 0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-pagination-disabled>.swiper-pagination,.swiper-pagination.swiper-pagination-disabled{display:none !important}.swiper-pagination-fraction,.swiper-pagination-custom,.swiper-horizontal>.swiper-pagination-bullets,.swiper-pagination-bullets.swiper-pagination-horizontal{bottom:var(--swiper-pagination-bottom, 8px);top:var(--swiper-pagination-top, auto);left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(0.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(0.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(0.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(0.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(0.33)}.swiper-pagination-bullet{width:var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));height:var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));display:inline-block;border-radius:var(--swiper-pagination-bullet-border-radius, 50%);background:var(--swiper-pagination-bullet-inactive-color, #000);opacity:var(--swiper-pagination-bullet-inactive-opacity, 0.2)}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet:only-child{display:none !important}.swiper-pagination-bullet-active{opacity:var(--swiper-pagination-bullet-opacity, 1);background:var(--swiper-pagination-color, var(--swiper-theme-color))}.swiper-vertical>.swiper-pagination-bullets,.swiper-pagination-vertical.swiper-pagination-bullets{right:var(--swiper-pagination-right, 8px);left:var(--swiper-pagination-left, auto);top:50%;transform:translate3d(0px, -50%, 0)}.swiper-vertical>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet{margin:var(--swiper-pagination-bullet-vertical-gap, 6px) 0;display:block}.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:200ms transform,200ms top}.swiper-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 var(--swiper-pagination-bullet-horizontal-gap, 4px)}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:200ms transform,200ms left}.swiper-horizontal.swiper-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:200ms transform,200ms right}.swiper-pagination-fraction{color:var(--swiper-pagination-fraction-color, inherit)}.swiper-pagination-progressbar{background:var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color, var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-horizontal>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-horizontal,.swiper-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite{width:100%;height:var(--swiper-pagination-progressbar-size, 4px);left:0;top:0}.swiper-vertical>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-vertical,.swiper-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite{width:var(--swiper-pagination-progressbar-size, 4px);height:100%;left:0;top:0}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:var(--swiper-scrollbar-border-radius, 10px);position:relative;touch-action:none;background:var(--swiper-scrollbar-bg-color, rgba(0, 0, 0, 0.1))}.swiper-scrollbar-disabled>.swiper-scrollbar,.swiper-scrollbar.swiper-scrollbar-disabled{display:none !important}.swiper-horizontal>.swiper-scrollbar,.swiper-scrollbar.swiper-scrollbar-horizontal{position:absolute;left:var(--swiper-scrollbar-sides-offset, 1%);bottom:var(--swiper-scrollbar-bottom, 4px);top:var(--swiper-scrollbar-top, auto);z-index:50;height:var(--swiper-scrollbar-size, 4px);width:calc(100% - 2*var(--swiper-scrollbar-sides-offset, 1%))}.swiper-vertical>.swiper-scrollbar,.swiper-scrollbar.swiper-scrollbar-vertical{position:absolute;left:var(--swiper-scrollbar-left, auto);right:var(--swiper-scrollbar-right, 4px);top:var(--swiper-scrollbar-sides-offset, 1%);z-index:50;width:var(--swiper-scrollbar-size, 4px);height:calc(100% - 2*var(--swiper-scrollbar-sides-offset, 1%))}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:var(--swiper-scrollbar-drag-bg-color, rgba(0, 0, 0, 0.5));border-radius:var(--swiper-scrollbar-border-radius, 10px);left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}.swiper-zoom-container{width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}.swiper-zoom-container>img,.swiper-zoom-container>svg,.swiper-zoom-container>canvas{max-width:100%;max-height:100%;object-fit:contain}.swiper-slide-zoomed{cursor:move;touch-action:none}.swiper .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-grid>.swiper-wrapper{flex-wrap:wrap}.swiper-grid-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-fade.swiper-free-mode .swiper-slide{transition-timing-function:ease-out}.swiper-fade .swiper-slide{pointer-events:none;transition-property:opacity}.swiper-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-fade .swiper-slide-active{pointer-events:auto}.swiper-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-cube{overflow:visible}.swiper-cube .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-cube .swiper-slide .swiper-slide{pointer-events:none}.swiper-cube.swiper-rtl .swiper-slide{transform-origin:100% 0}.swiper-cube .swiper-slide-active,.swiper-cube .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-cube .swiper-slide-active,.swiper-cube .swiper-slide-next,.swiper-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;opacity:.6;z-index:0}.swiper-cube .swiper-cube-shadow:before{content:"";background:#000;position:absolute;left:0;top:0;bottom:0;right:0;filter:blur(50px)}.swiper-cube .swiper-slide-next+.swiper-slide{pointer-events:auto;visibility:visible}.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-top,.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-bottom,.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-left,.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-right{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-flip{overflow:visible}.swiper-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-flip .swiper-slide-active,.swiper-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-top,.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-bottom,.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-left,.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-right{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-creative .swiper-slide{-webkit-backface-visibility:hidden;backface-visibility:hidden;overflow:hidden;transition-property:transform,opacity,height}.swiper-cards{overflow:visible}.swiper-cards .swiper-slide{transform-origin:center bottom;-webkit-backface-visibility:hidden;backface-visibility:hidden;overflow:hidden}`,"",{version:3,sources:["webpack://./node_modules/swiper/swiper-bundle.css"],names:[],mappings:"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",sourcesContent:["/**\n * Swiper 11.1.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2024 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: April 9, 2024\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url('data:application/font-woff;charset=utf-8;base64, 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');\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n.swiper-virtual .swiper-slide {\n  -webkit-backface-visibility: hidden;\n  transform: translateZ(0);\n}\n.swiper-virtual.swiper-css-mode .swiper-wrapper::after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n}\n.swiper-virtual.swiper-css-mode.swiper-horizontal .swiper-wrapper::after {\n  height: 1px;\n  width: var(--swiper-virtual-size);\n}\n.swiper-virtual.swiper-css-mode.swiper-vertical .swiper-wrapper::after {\n  width: 1px;\n  height: var(--swiper-virtual-size);\n}\n:root {\n  --swiper-navigation-size: 44px;\n  /*\n  --swiper-navigation-top-offset: 50%;\n  --swiper-navigation-sides-offset: 10px;\n  --swiper-navigation-color: var(--swiper-theme-color);\n  */\n}\n.swiper-button-prev,\n.swiper-button-next {\n  position: absolute;\n  top: var(--swiper-navigation-top-offset, 50%);\n  width: calc(var(--swiper-navigation-size) / 44 * 27);\n  height: var(--swiper-navigation-size);\n  margin-top: calc(0px - (var(--swiper-navigation-size) / 2));\n  z-index: 10;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--swiper-navigation-color, var(--swiper-theme-color));\n}\n.swiper-button-prev.swiper-button-disabled,\n.swiper-button-next.swiper-button-disabled {\n  opacity: 0.35;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-button-prev.swiper-button-hidden,\n.swiper-button-next.swiper-button-hidden {\n  opacity: 0;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-navigation-disabled .swiper-button-prev,\n.swiper-navigation-disabled .swiper-button-next {\n  display: none !important;\n}\n.swiper-button-prev svg,\n.swiper-button-next svg {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  transform-origin: center;\n}\n.swiper-rtl .swiper-button-prev svg,\n.swiper-rtl .swiper-button-next svg {\n  transform: rotate(180deg);\n}\n.swiper-button-prev,\n.swiper-rtl .swiper-button-next {\n  left: var(--swiper-navigation-sides-offset, 10px);\n  right: auto;\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-lock {\n  display: none;\n}\n/* Navigation font start */\n.swiper-button-prev:after,\n.swiper-button-next:after {\n  font-family: swiper-icons;\n  font-size: var(--swiper-navigation-size);\n  text-transform: none !important;\n  letter-spacing: 0;\n  font-variant: initial;\n  line-height: 1;\n}\n.swiper-button-prev:after,\n.swiper-rtl .swiper-button-next:after {\n  content: 'prev';\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-next:after,\n.swiper-rtl .swiper-button-prev:after {\n  content: 'next';\n}\n/* Navigation font end */\n:root {\n  /*\n  --swiper-pagination-color: var(--swiper-theme-color);\n  --swiper-pagination-left: auto;\n  --swiper-pagination-right: 8px;\n  --swiper-pagination-bottom: 8px;\n  --swiper-pagination-top: auto;\n  --swiper-pagination-fraction-color: inherit;\n  --swiper-pagination-progressbar-bg-color: rgba(0,0,0,0.25);\n  --swiper-pagination-progressbar-size: 4px;\n  --swiper-pagination-bullet-size: 8px;\n  --swiper-pagination-bullet-width: 8px;\n  --swiper-pagination-bullet-height: 8px;\n  --swiper-pagination-bullet-border-radius: 50%;\n  --swiper-pagination-bullet-inactive-color: #000;\n  --swiper-pagination-bullet-inactive-opacity: 0.2;\n  --swiper-pagination-bullet-opacity: 1;\n  --swiper-pagination-bullet-horizontal-gap: 4px;\n  --swiper-pagination-bullet-vertical-gap: 6px;\n  */\n}\n.swiper-pagination {\n  position: absolute;\n  text-align: center;\n  transition: 300ms opacity;\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.swiper-pagination.swiper-pagination-hidden {\n  opacity: 0;\n}\n.swiper-pagination-disabled > .swiper-pagination,\n.swiper-pagination.swiper-pagination-disabled {\n  display: none !important;\n}\n/* Common Styles */\n.swiper-pagination-fraction,\n.swiper-pagination-custom,\n.swiper-horizontal > .swiper-pagination-bullets,\n.swiper-pagination-bullets.swiper-pagination-horizontal {\n  bottom: var(--swiper-pagination-bottom, 8px);\n  top: var(--swiper-pagination-top, auto);\n  left: 0;\n  width: 100%;\n}\n/* Bullets */\n.swiper-pagination-bullets-dynamic {\n  overflow: hidden;\n  font-size: 0;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transform: scale(0.33);\n  position: relative;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullet {\n  width: var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));\n  height: var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));\n  display: inline-block;\n  border-radius: var(--swiper-pagination-bullet-border-radius, 50%);\n  background: var(--swiper-pagination-bullet-inactive-color, #000);\n  opacity: var(--swiper-pagination-bullet-inactive-opacity, 0.2);\n}\nbutton.swiper-pagination-bullet {\n  border: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: none;\n  -webkit-appearance: none;\n          appearance: none;\n}\n.swiper-pagination-clickable .swiper-pagination-bullet {\n  cursor: pointer;\n}\n.swiper-pagination-bullet:only-child {\n  display: none !important;\n}\n.swiper-pagination-bullet-active {\n  opacity: var(--swiper-pagination-bullet-opacity, 1);\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n}\n.swiper-vertical > .swiper-pagination-bullets,\n.swiper-pagination-vertical.swiper-pagination-bullets {\n  right: var(--swiper-pagination-right, 8px);\n  left: var(--swiper-pagination-left, auto);\n  top: 50%;\n  transform: translate3d(0px, -50%, 0);\n}\n.swiper-vertical > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: var(--swiper-pagination-bullet-vertical-gap, 6px) 0;\n  display: block;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  top: 50%;\n  transform: translateY(-50%);\n  width: 8px;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  display: inline-block;\n  transition: 200ms transform,\n        200ms top;\n}\n.swiper-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 0 var(--swiper-pagination-bullet-horizontal-gap, 4px);\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n        200ms left;\n}\n.swiper-horizontal.swiper-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n    200ms right;\n}\n/* Fraction */\n.swiper-pagination-fraction {\n  color: var(--swiper-pagination-fraction-color, inherit);\n}\n/* Progress */\n.swiper-pagination-progressbar {\n  background: var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));\n  position: absolute;\n}\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: scale(0);\n  transform-origin: left top;\n}\n.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  transform-origin: right top;\n}\n.swiper-horizontal > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-horizontal,\n.swiper-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite {\n  width: 100%;\n  height: var(--swiper-pagination-progressbar-size, 4px);\n  left: 0;\n  top: 0;\n}\n.swiper-vertical > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-vertical,\n.swiper-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite {\n  width: var(--swiper-pagination-progressbar-size, 4px);\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n.swiper-pagination-lock {\n  display: none;\n}\n:root {\n  /*\n  --swiper-scrollbar-border-radius: 10px;\n  --swiper-scrollbar-top: auto;\n  --swiper-scrollbar-bottom: 4px;\n  --swiper-scrollbar-left: auto;\n  --swiper-scrollbar-right: 4px;\n  --swiper-scrollbar-sides-offset: 1%;\n  --swiper-scrollbar-bg-color: rgba(0, 0, 0, 0.1);\n  --swiper-scrollbar-drag-bg-color: rgba(0, 0, 0, 0.5);\n  --swiper-scrollbar-size: 4px;\n  */\n}\n.swiper-scrollbar {\n  border-radius: var(--swiper-scrollbar-border-radius, 10px);\n  position: relative;\n  touch-action: none;\n  background: var(--swiper-scrollbar-bg-color, rgba(0, 0, 0, 0.1));\n}\n.swiper-scrollbar-disabled > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-disabled {\n  display: none !important;\n}\n.swiper-horizontal > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-horizontal {\n  position: absolute;\n  left: var(--swiper-scrollbar-sides-offset, 1%);\n  bottom: var(--swiper-scrollbar-bottom, 4px);\n  top: var(--swiper-scrollbar-top, auto);\n  z-index: 50;\n  height: var(--swiper-scrollbar-size, 4px);\n  width: calc(100% - 2 * var(--swiper-scrollbar-sides-offset, 1%));\n}\n.swiper-vertical > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-vertical {\n  position: absolute;\n  left: var(--swiper-scrollbar-left, auto);\n  right: var(--swiper-scrollbar-right, 4px);\n  top: var(--swiper-scrollbar-sides-offset, 1%);\n  z-index: 50;\n  width: var(--swiper-scrollbar-size, 4px);\n  height: calc(100% - 2 * var(--swiper-scrollbar-sides-offset, 1%));\n}\n.swiper-scrollbar-drag {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  background: var(--swiper-scrollbar-drag-bg-color, rgba(0, 0, 0, 0.5));\n  border-radius: var(--swiper-scrollbar-border-radius, 10px);\n  left: 0;\n  top: 0;\n}\n.swiper-scrollbar-cursor-drag {\n  cursor: move;\n}\n.swiper-scrollbar-lock {\n  display: none;\n}\n/* Zoom container styles start */\n.swiper-zoom-container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n.swiper-zoom-container > img,\n.swiper-zoom-container > svg,\n.swiper-zoom-container > canvas {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n}\n/* Zoom container styles end */\n.swiper-slide-zoomed {\n  cursor: move;\n  touch-action: none;\n}\n/* a11y */\n.swiper .swiper-notification {\n  position: absolute;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n  opacity: 0;\n  z-index: -1000;\n}\n.swiper-free-mode > .swiper-wrapper {\n  transition-timing-function: ease-out;\n  margin: 0 auto;\n}\n.swiper-grid > .swiper-wrapper {\n  flex-wrap: wrap;\n}\n.swiper-grid-column > .swiper-wrapper {\n  flex-wrap: wrap;\n  flex-direction: column;\n}\n.swiper-fade.swiper-free-mode .swiper-slide {\n  transition-timing-function: ease-out;\n}\n.swiper-fade .swiper-slide {\n  pointer-events: none;\n  transition-property: opacity;\n}\n.swiper-fade .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-fade .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-fade .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-cube {\n  overflow: visible;\n}\n.swiper-cube .swiper-slide {\n  pointer-events: none;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  z-index: 1;\n  visibility: hidden;\n  transform-origin: 0 0;\n  width: 100%;\n  height: 100%;\n}\n.swiper-cube .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-cube.swiper-rtl .swiper-slide {\n  transform-origin: 100% 0;\n}\n.swiper-cube .swiper-slide-active,\n.swiper-cube .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-cube .swiper-slide-active,\n.swiper-cube .swiper-slide-next,\n.swiper-cube .swiper-slide-prev {\n  pointer-events: auto;\n  visibility: visible;\n}\n.swiper-cube .swiper-cube-shadow {\n  position: absolute;\n  left: 0;\n  bottom: 0px;\n  width: 100%;\n  height: 100%;\n  opacity: 0.6;\n  z-index: 0;\n}\n.swiper-cube .swiper-cube-shadow:before {\n  content: '';\n  background: #000;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  filter: blur(50px);\n}\n.swiper-cube .swiper-slide-next + .swiper-slide {\n  pointer-events: auto;\n  visibility: visible;\n}\n/* Cube slide shadows start */\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-top,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-bottom,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-left,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-right {\n  z-index: 0;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* Cube slide shadows end */\n.swiper-flip {\n  overflow: visible;\n}\n.swiper-flip .swiper-slide {\n  pointer-events: none;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  z-index: 1;\n}\n.swiper-flip .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-flip .swiper-slide-active,\n.swiper-flip .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n/* Flip slide shadows start */\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-top,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-bottom,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-left,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-right {\n  z-index: 0;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* Flip slide shadows end */\n.swiper-creative .swiper-slide {\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  overflow: hidden;\n  transition-property: transform, opacity, height;\n}\n.swiper-cards {\n  overflow: visible;\n}\n.swiper-cards .swiper-slide {\n  transform-origin: center bottom;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  overflow: hidden;\n}\n"],sourceRoot:""}]);const u=d},72:e=>{var t=[];function i(e){for(var i=-1,s=0;s<t.length;s++)if(t[s].identifier===e){i=s;break}return i}function s(e,s){for(var a={},n=[],o=0;o<e.length;o++){var l=e[o],p=s.base?l[0]+s.base:l[0],d=a[p]||0,c="".concat(p," ").concat(d);a[p]=d+1;var u=i(c),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var m=r(A,s);s.byIndex=o,t.splice(o,0,{identifier:c,updater:m,references:1})}n.push(c)}return n}function r(e,t){var i=t.domAPI(t);return i.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;i.update(e=t)}else i.remove()}}e.exports=function(e,r){var a=s(e=e||[],r=r||{});return function(e){e=e||[];for(var n=0;n<a.length;n++){var o=i(a[n]);t[o].references--}for(var l=s(e,r),p=0;p<a.length;p++){var d=i(a[p]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},659:e=>{var t={};e.exports=function(e,i){var s=function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}(e);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(i)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,i)=>{e.exports=function(e){var t=i.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(i){!function(e,t,i){var s="";i.supports&&(s+="@supports (".concat(i.supports,") {")),i.media&&(s+="@media ".concat(i.media," {"));var r=void 0!==i.layer;r&&(s+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),s+=i.css,r&&(s+="}"),i.media&&(s+="}"),i.supports&&(s+="}");var a=i.sourceMap;a&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(s,e,t.options)}(t,e,i)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},85:e=>{e.exports="data:application/font-woff;charset=utf-8;base64, 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"}},t={};function i(s){var r=t[s];if(void 0!==r)return r.exports;var a=t[s]={id:s,exports:{}};return e[s](a,a.exports,i),a.exports}i.m=e,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.b=document.baseURI||self.location.href,i.nc=void 0,(()=>{let e=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:()=>{e=!0}}))}catch(e){}function t(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function s(e,i){void 0===e&&(e={}),void 0===i&&(i={}),Object.keys(i).forEach((r=>{void 0===e[r]?e[r]=i[r]:t(i[r])&&t(e[r])&&Object.keys(i[r]).length>0&&s(e[r],i[r])}))}const r={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function a(){const e="undefined"!=typeof document?document:{};return s(e,r),e}const n={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function o(){const e="undefined"!=typeof window?window:{};return s(e,n),e}function l(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}function p(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function d(){return Date.now()}function c(e,t){void 0===t&&(t="x");const i=o();let s,r,a;const n=function(e){const t=o();let i;return t.getComputedStyle&&(i=t.getComputedStyle(e,null)),!i&&e.currentStyle&&(i=e.currentStyle),i||(i=e.style),i}(e);return i.WebKitCSSMatrix?(r=n.transform||n.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),a=new i.WebKitCSSMatrix("none"===r?"":r)):(a=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=a.toString().split(",")),"x"===t&&(r=i.WebKitCSSMatrix?a.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),"y"===t&&(r=i.WebKitCSSMatrix?a.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5])),r||0}function u(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function A(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let s=1;s<arguments.length;s+=1){const r=s<0||arguments.length<=s?void 0:arguments[s];if(null!=r&&(i=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,s=i.length;t<s;t+=1){const s=i[t],a=Object.getOwnPropertyDescriptor(r,s);void 0!==a&&a.enumerable&&(u(e[s])&&u(r[s])?r[s].__swiper__?e[s]=r[s]:A(e[s],r[s]):!u(e[s])&&u(r[s])?(e[s]={},r[s].__swiper__?e[s]=r[s]:A(e[s],r[s])):e[s]=r[s])}}}var i;return e}function m(e,t,i){e.style.setProperty(t,i)}function h(e){let{swiper:t,targetPosition:i,side:s}=e;const r=o(),a=-t.translate;let n,l=null;const p=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const d=i>a?"next":"prev",c=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,u=()=>{n=(new Date).getTime(),null===l&&(l=n);const e=Math.max(Math.min((n-l)/p,1),0),o=.5-Math.cos(e*Math.PI)/2;let d=a+o*(i-a);if(c(d,i)&&(d=i),t.wrapperEl.scrollTo({[s]:d}),c(d,i))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[s]:d})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(u)};u()}function w(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function g(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function f(e){try{return void console.warn(e)}catch(e){}}function v(e,t){void 0===t&&(t=[]);const i=document.createElement(e);return i.classList.add(...Array.isArray(t)?t:l(t)),i}function b(e){const t=o(),i=a(),s=e.getBoundingClientRect(),r=i.body,n=e.clientTop||r.clientTop||0,l=e.clientLeft||r.clientLeft||0,p=e===t?t.scrollY:e.scrollTop,d=e===t?t.scrollX:e.scrollLeft;return{top:s.top+p-n,left:s.left+d-l}}function C(e,t){return o().getComputedStyle(e,null).getPropertyValue(t)}function y(e){let t,i=e;if(i){for(t=0;null!==(i=i.previousSibling);)1===i.nodeType&&(t+=1);return t}}function E(e,t){const i=[];let s=e.parentElement;for(;s;)t?s.matches(t)&&i.push(s):i.push(s),s=s.parentElement;return i}function x(e,t){t&&e.addEventListener("transitionend",(function i(s){s.target===e&&(t.call(e,s),e.removeEventListener("transitionend",i))}))}function S(e,t,i){const s=o();return i?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function T(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let M,k,B;function z(){return M||(M=function(){const e=o(),t=a();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),M}function L(e){return void 0===e&&(e={}),k||(k=function(e){let{userAgent:t}=void 0===e?{}:e;const i=z(),s=o(),r=s.navigator.platform,a=t||s.navigator.userAgent,n={ios:!1,android:!1},l=s.screen.width,p=s.screen.height,d=a.match(/(Android);?[\s\/]+([\d.]+)?/);let c=a.match(/(iPad).*OS\s([\d_]+)/);const u=a.match(/(iPod)(.*OS\s([\d_]+))?/),A=!c&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),m="Win32"===r;let h="MacIntel"===r;return!c&&h&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${p}`)>=0&&(c=a.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),h=!1),d&&!m&&(n.os="android",n.android=!0),(c||A||u)&&(n.os="ios",n.ios=!0),n}(e)),k}var P={on(e,t,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof t)return s;const r=i?"unshift":"push";return e.split(" ").forEach((e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][r](t)})),s},once(e,t,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof t)return s;function r(){s.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var i=arguments.length,a=new Array(i),n=0;n<i;n++)a[n]=arguments[n];t.apply(s,a)}return r.__emitterProxy=t,s.on(e,r,i)},onAny(e,t){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof e)return i;const s=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[s](e),i},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off(e,t){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach(((s,r)=>{(s===t||s.__emitterProxy&&s.__emitterProxy===t)&&i.eventsListeners[e].splice(r,1)}))})),i):i},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,i,s;for(var r=arguments.length,a=new Array(r),n=0;n<r;n++)a[n]=arguments[n];return"string"==typeof a[0]||Array.isArray(a[0])?(t=a[0],i=a.slice(1,a.length),s=e):(t=a[0].events,i=a[0].data,s=a[0].context||e),i.unshift(s),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(s,[t,...i])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(s,i)}))})),e}};const D=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)},I=(e,t)=>{if(!e||e.destroyed||!e.params)return;const i=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(i){let t=i.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(i.shadowRoot?t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},F=(e,t)=>{if(!e.slides[t])return;const i=e.slides[t].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},O=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const i=e.slides.length;if(!i||!t||t<0)return;t=Math.min(t,i);const s="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const i=r,a=[i-t];return a.push(...Array.from({length:t}).map(((e,t)=>i+s+t))),void e.slides.forEach(((t,i)=>{a.includes(t.column)&&F(e,i)}))}const a=r+s-1;if(e.params.rewind||e.params.loop)for(let s=r-t;s<=a+t;s+=1){const t=(s%i+i)%i;(t<r||t>a)&&F(e,t)}else for(let s=Math.max(r-t,0);s<=Math.min(a+t,i-1);s+=1)s!==r&&(s>a||s<r)&&F(e,s)};var Y={updateSize:function(){const e=this;let t,i;const s=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:s.clientWidth,i=void 0!==e.params.height&&null!==e.params.height?e.params.height:s.clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(C(s,"padding-left")||0,10)-parseInt(C(s,"padding-right")||0,10),i=i-parseInt(C(s,"padding-top")||0,10)-parseInt(C(s,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(i)&&(i=0),Object.assign(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this;function t(t,i){return parseFloat(t.getPropertyValue(e.getDirectionLabel(i))||0)}const i=e.params,{wrapperEl:s,slidesEl:r,size:a,rtlTranslate:n,wrongRTL:o}=e,l=e.virtual&&i.virtual.enabled,p=l?e.virtual.slides.length:e.slides.length,d=g(r,`.${e.params.slideClass}, swiper-slide`),c=l?e.virtual.slides.length:d.length;let u=[];const A=[],h=[];let w=i.slidesOffsetBefore;"function"==typeof w&&(w=i.slidesOffsetBefore.call(e));let f=i.slidesOffsetAfter;"function"==typeof f&&(f=i.slidesOffsetAfter.call(e));const v=e.snapGrid.length,b=e.slidesGrid.length;let y=i.spaceBetween,E=-w,x=0,T=0;if(void 0===a)return;"string"==typeof y&&y.indexOf("%")>=0?y=parseFloat(y.replace("%",""))/100*a:"string"==typeof y&&(y=parseFloat(y)),e.virtualSize=-y,d.forEach((e=>{n?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(m(s,"--swiper-centered-offset-before",""),m(s,"--swiper-centered-offset-after",""));const M=i.grid&&i.grid.rows>1&&e.grid;let k;M?e.grid.initSlides(d):e.grid&&e.grid.unsetSlides();const B="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((e=>void 0!==i.breakpoints[e].slidesPerView)).length>0;for(let s=0;s<c;s+=1){let r;if(k=0,d[s]&&(r=d[s]),M&&e.grid.updateSlide(s,r,d),!d[s]||"none"!==C(r,"display")){if("auto"===i.slidesPerView){B&&(d[s].style[e.getDirectionLabel("width")]="");const a=getComputedStyle(r),n=r.style.transform,o=r.style.webkitTransform;if(n&&(r.style.transform="none"),o&&(r.style.webkitTransform="none"),i.roundLengths)k=e.isHorizontal()?S(r,"width",!0):S(r,"height",!0);else{const e=t(a,"width"),i=t(a,"padding-left"),s=t(a,"padding-right"),n=t(a,"margin-left"),o=t(a,"margin-right"),l=a.getPropertyValue("box-sizing");if(l&&"border-box"===l)k=e+n+o;else{const{clientWidth:t,offsetWidth:a}=r;k=e+i+s+n+o+(a-t)}}n&&(r.style.transform=n),o&&(r.style.webkitTransform=o),i.roundLengths&&(k=Math.floor(k))}else k=(a-(i.slidesPerView-1)*y)/i.slidesPerView,i.roundLengths&&(k=Math.floor(k)),d[s]&&(d[s].style[e.getDirectionLabel("width")]=`${k}px`);d[s]&&(d[s].swiperSlideSize=k),h.push(k),i.centeredSlides?(E=E+k/2+x/2+y,0===x&&0!==s&&(E=E-a/2-y),0===s&&(E=E-a/2-y),Math.abs(E)<.001&&(E=0),i.roundLengths&&(E=Math.floor(E)),T%i.slidesPerGroup==0&&u.push(E),A.push(E)):(i.roundLengths&&(E=Math.floor(E)),(T-Math.min(e.params.slidesPerGroupSkip,T))%e.params.slidesPerGroup==0&&u.push(E),A.push(E),E=E+k+y),e.virtualSize+=k+y,x=k,T+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+f,n&&o&&("slide"===i.effect||"coverflow"===i.effect)&&(s.style.width=`${e.virtualSize+y}px`),i.setWrapperSize&&(s.style[e.getDirectionLabel("width")]=`${e.virtualSize+y}px`),M&&e.grid.updateWrapperSize(k,u),!i.centeredSlides){const t=[];for(let s=0;s<u.length;s+=1){let r=u[s];i.roundLengths&&(r=Math.floor(r)),u[s]<=e.virtualSize-a&&t.push(r)}u=t,Math.floor(e.virtualSize-a)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-a)}if(l&&i.loop){const t=h[0]+y;if(i.slidesPerGroup>1){const s=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/i.slidesPerGroup),r=t*i.slidesPerGroup;for(let e=0;e<s;e+=1)u.push(u[u.length-1]+r)}for(let s=0;s<e.virtual.slidesBefore+e.virtual.slidesAfter;s+=1)1===i.slidesPerGroup&&u.push(u[u.length-1]+t),A.push(A[A.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==y){const t=e.isHorizontal()&&n?"marginLeft":e.getDirectionLabel("marginRight");d.filter(((e,t)=>!(i.cssMode&&!i.loop)||t!==d.length-1)).forEach((e=>{e.style[t]=`${y}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let e=0;h.forEach((t=>{e+=t+(y||0)})),e-=y;const t=e-a;u=u.map((e=>e<=0?-w:e>t?t+f:e))}if(i.centerInsufficientSlides){let e=0;if(h.forEach((t=>{e+=t+(y||0)})),e-=y,e<a){const t=(a-e)/2;u.forEach(((e,i)=>{u[i]=e-t})),A.forEach(((e,i)=>{A[i]=e+t}))}}if(Object.assign(e,{slides:d,snapGrid:u,slidesGrid:A,slidesSizesGrid:h}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){m(s,"--swiper-centered-offset-before",-u[0]+"px"),m(s,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const t=-e.snapGrid[0],i=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+i))}if(c!==p&&e.emit("slidesLengthChange"),u.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),A.length!==b&&e.emit("slidesGridLengthChange"),i.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(l||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const t=`${i.containerModifierClass}backface-hidden`,s=e.el.classList.contains(t);c<=i.maxBackfaceHiddenSlides?s||e.el.classList.add(t):s&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,i=[],s=t.virtual&&t.params.virtual.enabled;let r,a=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>s?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{i.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!s)break;i.push(n(e))}else i.push(n(t.activeIndex));for(r=0;r<i.length;r+=1)if(void 0!==i[r]){const e=i[r].offsetHeight;a=e>a?e:a}(a||0===a)&&(t.wrapperEl.style.height=`${a}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,i=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let s=0;s<t.length;s+=1)t[s].swiperSlideOffset=(e.isHorizontal()?t[s].offsetLeft:t[s].offsetTop)-i-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,i=t.params,{slides:s,rtlTranslate:r,snapGrid:a}=t;if(0===s.length)return;void 0===s[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;r&&(n=e),s.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=i.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<s.length;e+=1){const l=s[e];let p=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(p-=s[0].swiperSlideOffset);const d=(n+(i.centeredSlides?t.minTranslate():0)-p)/(l.swiperSlideSize+o),c=(n-a[0]+(i.centeredSlides?t.minTranslate():0)-p)/(l.swiperSlideSize+o),u=-(n-p),A=u+t.slidesSizesGrid[e],m=u>=0&&u<=t.size-t.slidesSizesGrid[e];(u>=0&&u<t.size-1||A>1&&A<=t.size||u<=0&&A>=t.size)&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e),s[e].classList.add(i.slideVisibleClass)),m&&s[e].classList.add(i.slideFullyVisibleClass),l.progress=r?-d:d,l.originalProgress=r?-c:c}},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,s=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:a,isEnd:n,progressLoop:o}=t;const l=a,p=n;if(0===s)r=0,a=!0,n=!0;else{r=(e-t.minTranslate())/s;const i=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;a=i||r<=0,n=o||r>=1,i&&(r=0),o&&(r=1)}if(i.loop){const i=t.getSlideIndexByData(0),s=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[i],a=t.slidesGrid[s],n=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);o=l>=r?(l-r)/n:(l+n-a)/n,o>1&&(o-=1)}Object.assign(t,{progress:r,progressLoop:o,isBeginning:a,isEnd:n}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),a&&!l&&t.emit("reachBeginning toEdge"),n&&!p&&t.emit("reachEnd toEdge"),(l&&!a||p&&!n)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,slidesEl:s,activeIndex:r}=e,a=e.virtual&&i.virtual.enabled,n=e.grid&&i.grid&&i.grid.rows>1,o=e=>g(s,`.${i.slideClass}${e}, swiper-slide${e}`)[0];let l,p,d;if(a)if(i.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=o(`[data-swiper-slide-index="${t}"]`)}else l=o(`[data-swiper-slide-index="${r}"]`);else n?(l=t.filter((e=>e.column===r))[0],d=t.filter((e=>e.column===r+1))[0],p=t.filter((e=>e.column===r-1))[0]):l=t[r];l&&(n||(d=function(e,t){const i=[];for(;e.nextElementSibling;){const s=e.nextElementSibling;t?s.matches(t)&&i.push(s):i.push(s),e=s}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=t[0]),p=function(e,t){const i=[];for(;e.previousElementSibling;){const s=e.previousElementSibling;t?s.matches(t)&&i.push(s):i.push(s),e=s}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!p&&(p=t[t.length-1]))),t.forEach((e=>{D(e,e===l,i.slideActiveClass),D(e,e===d,i.slideNextClass),D(e,e===p,i.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{snapGrid:s,params:r,activeIndex:a,realIndex:n,snapIndex:o}=t;let l,p=e;const d=e=>{let i=e-t.virtual.slidesBefore;return i<0&&(i=t.virtual.slides.length+i),i>=t.virtual.slides.length&&(i-=t.virtual.slides.length),i};if(void 0===p&&(p=function(e){const{slidesGrid:t,params:i}=e,s=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?s>=t[e]&&s<t[e+1]-(t[e+1]-t[e])/2?r=e:s>=t[e]&&s<t[e+1]&&(r=e+1):s>=t[e]&&(r=e);return i.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),s.indexOf(i)>=0)l=s.indexOf(i);else{const e=Math.min(r.slidesPerGroupSkip,p);l=e+Math.floor((p-e)/r.slidesPerGroup)}if(l>=s.length&&(l=s.length-1),p===a&&!t.params.loop)return void(l!==o&&(t.snapIndex=l,t.emit("snapIndexChange")));if(p===a&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=d(p));const c=t.grid&&r.grid&&r.grid.rows>1;let u;if(t.virtual&&r.virtual.enabled&&r.loop)u=d(p);else if(c){const e=t.slides.filter((e=>e.column===p))[0];let i=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(t.slides.indexOf(e),0)),u=Math.floor(i/r.grid.rows)}else if(t.slides[p]){const e=t.slides[p].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):p}else u=p;Object.assign(t,{previousSnapIndex:o,snapIndex:l,previousRealIndex:n,realIndex:u,previousIndex:a,activeIndex:p}),t.initialized&&O(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(n!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const i=this,s=i.params;let r=e.closest(`.${s.slideClass}, swiper-slide`);!r&&i.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${s.slideClass}, swiper-slide`)&&(r=e)}));let a,n=!1;if(r)for(let e=0;e<i.slides.length;e+=1)if(i.slides[e]===r){n=!0,a=e;break}if(!r||!n)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=r,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=a,s.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};function G(e){let{swiper:t,runCallbacks:i,direction:s,step:r}=e;const{activeIndex:a,previousIndex:n}=t;let o=s;if(o||(o=a>n?"next":a<n?"prev":"reset"),t.emit(`transition${r}`),i&&a!==n){if("reset"===o)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===o?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var $={slideTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;let n=e;n<0&&(n=0);const{params:o,snapGrid:l,slidesGrid:p,previousIndex:d,activeIndex:c,rtlTranslate:u,wrapperEl:A,enabled:m}=a;if(!m&&!s&&!r||a.destroyed||a.animating&&o.preventInteractionOnTransition)return!1;void 0===t&&(t=a.params.speed);const w=Math.min(a.params.slidesPerGroupSkip,n);let g=w+Math.floor((n-w)/a.params.slidesPerGroup);g>=l.length&&(g=l.length-1);const f=-l[g];if(o.normalizeSlideIndex)for(let e=0;e<p.length;e+=1){const t=-Math.floor(100*f),i=Math.floor(100*p[e]),s=Math.floor(100*p[e+1]);void 0!==p[e+1]?t>=i&&t<s-(s-i)/2?n=e:t>=i&&t<s&&(n=e+1):t>=i&&(n=e)}if(a.initialized&&n!==c){if(!a.allowSlideNext&&(u?f>a.translate&&f>a.minTranslate():f<a.translate&&f<a.minTranslate()))return!1;if(!a.allowSlidePrev&&f>a.translate&&f>a.maxTranslate()&&(c||0)!==n)return!1}let v;if(n!==(d||0)&&i&&a.emit("beforeSlideChangeStart"),a.updateProgress(f),v=n>c?"next":n<c?"prev":"reset",u&&-f===a.translate||!u&&f===a.translate)return a.updateActiveIndex(n),o.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==o.effect&&a.setTranslate(f),"reset"!==v&&(a.transitionStart(i,v),a.transitionEnd(i,v)),!1;if(o.cssMode){const e=a.isHorizontal(),i=u?f:-f;if(0===t){const t=a.virtual&&a.params.virtual.enabled;t&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),t&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{A[e?"scrollLeft":"scrollTop"]=i}))):A[e?"scrollLeft":"scrollTop"]=i,t&&requestAnimationFrame((()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1}))}else{if(!a.support.smoothScroll)return h({swiper:a,targetPosition:i,side:e?"left":"top"}),!0;A.scrollTo({[e?"left":"top"]:i,behavior:"smooth"})}return!0}return a.setTransition(t),a.setTranslate(f),a.updateActiveIndex(n),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,s),a.transitionStart(i,v),0===t?a.transitionEnd(i,v):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,v))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,i,s){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const r=this;if(r.destroyed)return;void 0===t&&(t=r.params.speed);const a=r.grid&&r.params.grid&&r.params.grid.rows>1;let n=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)n+=r.virtual.slidesBefore;else{let e;if(a){const t=n*r.params.grid.rows;e=r.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=r.getSlideIndexByData(n);const t=a?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:i}=r.params;let o=r.params.slidesPerView;"auto"===o?o=r.slidesPerViewDynamic():(o=Math.ceil(parseFloat(r.params.slidesPerView,10)),i&&o%2==0&&(o+=1));let l=t-e<o;if(i&&(l=l||e<Math.ceil(o/2)),s&&i&&"auto"!==r.params.slidesPerView&&!a&&(l=!1),l){const s=i?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:s,slideTo:!0,activeSlideIndex:"next"===s?e+1:e-t+1,slideRealIndex:"next"===s?r.realIndex:void 0})}if(a){const e=n*r.params.grid.rows;n=r.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else n=r.getSlideIndexByData(n)}return requestAnimationFrame((()=>{r.slideTo(n,t,i,s)})),r},slideNext:function(e,t,i){void 0===t&&(t=!0);const s=this,{enabled:r,params:a,animating:n}=s;if(!r||s.destroyed)return s;void 0===e&&(e=s.params.speed);let o=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(o=Math.max(s.slidesPerViewDynamic("current",!0),1));const l=s.activeIndex<a.slidesPerGroupSkip?1:o,p=s.virtual&&a.virtual.enabled;if(a.loop){if(n&&!p&&a.loopPreventsSliding)return!1;if(s.loopFix({direction:"next"}),s._clientLeft=s.wrapperEl.clientLeft,s.activeIndex===s.slides.length-1&&a.cssMode)return requestAnimationFrame((()=>{s.slideTo(s.activeIndex+l,e,t,i)})),!0}return a.rewind&&s.isEnd?s.slideTo(0,e,t,i):s.slideTo(s.activeIndex+l,e,t,i)},slidePrev:function(e,t,i){void 0===t&&(t=!0);const s=this,{params:r,snapGrid:a,slidesGrid:n,rtlTranslate:o,enabled:l,animating:p}=s;if(!l||s.destroyed)return s;void 0===e&&(e=s.params.speed);const d=s.virtual&&r.virtual.enabled;if(r.loop){if(p&&!d&&r.loopPreventsSliding)return!1;s.loopFix({direction:"prev"}),s._clientLeft=s.wrapperEl.clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=c(o?s.translate:-s.translate),A=a.map((e=>c(e)));let m=a[A.indexOf(u)-1];if(void 0===m&&r.cssMode){let e;a.forEach(((t,i)=>{u>=t&&(e=i)})),void 0!==e&&(m=a[e>0?e-1:e])}let h=0;if(void 0!==m&&(h=n.indexOf(m),h<0&&(h=s.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(h=h-s.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),r.rewind&&s.isBeginning){const r=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(r,e,t,i)}return r.loop&&0===s.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{s.slideTo(h,e,t,i)})),!0):s.slideTo(h,e,t,i)},slideReset:function(e,t,i){void 0===t&&(t=!0);const s=this;if(!s.destroyed)return void 0===e&&(e=s.params.speed),s.slideTo(s.activeIndex,e,t,i)},slideToClosest:function(e,t,i,s){void 0===t&&(t=!0),void 0===s&&(s=.5);const r=this;if(r.destroyed)return;void 0===e&&(e=r.params.speed);let a=r.activeIndex;const n=Math.min(r.params.slidesPerGroupSkip,a),o=n+Math.floor((a-n)/r.params.slidesPerGroup),l=r.rtlTranslate?r.translate:-r.translate;if(l>=r.snapGrid[o]){const e=r.snapGrid[o];l-e>(r.snapGrid[o+1]-e)*s&&(a+=r.params.slidesPerGroup)}else{const e=r.snapGrid[o-1];l-e<=(r.snapGrid[o]-e)*s&&(a-=r.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,r.slidesGrid.length-1),r.slideTo(a,e,t,i)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:i}=e,s="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,a=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-s/2||a>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),a=e.getSlideIndex(g(i,`${n}[data-swiper-slide-index="${r}"]`)[0]),p((()=>{e.slideTo(a)}))):e.slideTo(a):a>e.slides.length-s?(e.loopFix(),a=e.getSlideIndex(g(i,`${n}[data-swiper-slide-index="${r}"]`)[0]),p((()=>{e.slideTo(a)}))):e.slideTo(a)}else e.slideTo(a)}},N={loopCreate:function(e){const t=this,{params:i,slidesEl:s}=t;if(!i.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{g(s,`.${i.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},a=t.grid&&i.grid&&i.grid.rows>1,n=i.slidesPerGroup*(a?i.grid.rows:1),o=t.slides.length%n!=0,l=a&&t.slides.length%i.grid.rows!=0,p=e=>{for(let s=0;s<e;s+=1){const e=t.isElement?v("swiper-slide",[i.slideBlankClass]):v("div",[i.slideClass,i.slideBlankClass]);t.slidesEl.append(e)}};o?(i.loopAddBlankSlides?(p(n-t.slides.length%n),t.recalcSlides(),t.updateSlides()):f("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),r()):l?(i.loopAddBlankSlides?(p(i.grid.rows-t.slides.length%i.grid.rows),t.recalcSlides(),t.updateSlides()):f("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),r()):r(),t.loopFix({slideRealIndex:e,direction:i.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:i=!0,direction:s,setTranslate:r,activeSlideIndex:a,byController:n,byMousewheel:o}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:p,allowSlidePrev:d,allowSlideNext:c,slidesEl:u,params:A}=l,{centeredSlides:m}=A;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&A.virtual.enabled)return i&&(A.centeredSlides||0!==l.snapIndex?A.centeredSlides&&l.snapIndex<A.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=c,void l.emit("loopFix");let h=A.slidesPerView;"auto"===h?h=l.slidesPerViewDynamic():(h=Math.ceil(parseFloat(A.slidesPerView,10)),m&&h%2==0&&(h+=1));const w=A.slidesPerGroupAuto?h:A.slidesPerGroup;let g=w;g%w!=0&&(g+=w-g%w),g+=A.loopAdditionalSlides,l.loopedSlides=g;const v=l.grid&&A.grid&&A.grid.rows>1;p.length<h+g?f("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):v&&"row"===A.grid.fill&&f("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const b=[],C=[];let y=l.activeIndex;void 0===a?a=l.getSlideIndex(p.filter((e=>e.classList.contains(A.slideActiveClass)))[0]):y=a;const E="next"===s||!s,x="prev"===s||!s;let S=0,T=0;const M=v?Math.ceil(p.length/A.grid.rows):p.length,k=(v?p[a].column:a)+(m&&void 0===r?-h/2+.5:0);if(k<g){S=Math.max(g-k,w);for(let e=0;e<g-k;e+=1){const t=e-Math.floor(e/M)*M;if(v){const e=M-t-1;for(let t=p.length-1;t>=0;t-=1)p[t].column===e&&b.push(t)}else b.push(M-t-1)}}else if(k+h>M-g){T=Math.max(k-(M-2*g),w);for(let e=0;e<T;e+=1){const t=e-Math.floor(e/M)*M;v?p.forEach(((e,i)=>{e.column===t&&C.push(i)})):C.push(t)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),x&&b.forEach((e=>{p[e].swiperLoopMoveDOM=!0,u.prepend(p[e]),p[e].swiperLoopMoveDOM=!1})),E&&C.forEach((e=>{p[e].swiperLoopMoveDOM=!0,u.append(p[e]),p[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===A.slidesPerView?l.updateSlides():v&&(b.length>0&&x||C.length>0&&E)&&l.slides.forEach(((e,t)=>{l.grid.updateSlide(t,e,l.slides)})),A.watchSlidesProgress&&l.updateSlidesOffset(),i)if(b.length>0&&x){if(void 0===t){const e=l.slidesGrid[y],t=l.slidesGrid[y+S]-e;o?l.setTranslate(l.translate-t):(l.slideTo(y+Math.ceil(S),0,!1,!0),r&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else if(r){const e=v?b.length/A.grid.rows:b.length;l.slideTo(l.activeIndex+e,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(C.length>0&&E)if(void 0===t){const e=l.slidesGrid[y],t=l.slidesGrid[y-T]-e;o?l.setTranslate(l.translate-t):(l.slideTo(y-T,0,!1,!0),r&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else{const e=v?C.length/A.grid.rows:C.length;l.slideTo(l.activeIndex-e,0,!1,!0)}if(l.allowSlidePrev=d,l.allowSlideNext=c,l.controller&&l.controller.control&&!n){const e={slideRealIndex:t,direction:s,setTranslate:r,activeSlideIndex:a,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===A.slidesPerView&&i})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===A.slidesPerView&&i})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:i}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const s=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;s[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),s.forEach((e=>{i.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function q(e,t,i){const s=o(),{params:r}=e,a=r.edgeSwipeDetection,n=r.edgeSwipeThreshold;return!a||!(i<=n||i>=s.innerWidth-n)||"prevent"===a&&(t.preventDefault(),!0)}function R(e){const t=this,i=a();let s=e;s.originalEvent&&(s=s.originalEvent);const r=t.touchEventsData;if("pointerdown"===s.type){if(null!==r.pointerId&&r.pointerId!==s.pointerId)return;r.pointerId=s.pointerId}else"touchstart"===s.type&&1===s.targetTouches.length&&(r.touchId=s.targetTouches[0].identifier);if("touchstart"===s.type)return void q(t,s,s.targetTouches[0].pageX);const{params:n,touches:l,enabled:p}=t;if(!p)return;if(!n.simulateTouch&&"mouse"===s.pointerType)return;if(t.animating&&n.preventInteractionOnTransition)return;!t.animating&&n.cssMode&&n.loop&&t.loopFix();let c=s.target;if("wrapper"===n.touchEventsTarget&&!t.wrapperEl.contains(c))return;if("which"in s&&3===s.which)return;if("button"in s&&s.button>0)return;if(r.isTouched&&r.isMoved)return;const u=!!n.noSwipingClass&&""!==n.noSwipingClass,A=s.composedPath?s.composedPath():s.path;u&&s.target&&s.target.shadowRoot&&A&&(c=A[0]);const m=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,h=!(!s.target||!s.target.shadowRoot);if(n.noSwiping&&(h?function(e,t){return void 0===t&&(t=this),function t(i){if(!i||i===a()||i===o())return null;i.assignedSlot&&(i=i.assignedSlot);const s=i.closest(e);return s||i.getRootNode?s||t(i.getRootNode().host):null}(t)}(m,c):c.closest(m)))return void(t.allowClick=!0);if(n.swipeHandler&&!c.closest(n.swipeHandler))return;l.currentX=s.pageX,l.currentY=s.pageY;const w=l.currentX,g=l.currentY;if(!q(t,s,w))return;Object.assign(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=w,l.startY=g,r.touchStartTime=d(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(r.allowThresholdMove=!1);let f=!0;c.matches(r.focusableElements)&&(f=!1,"SELECT"===c.nodeName&&(r.isTouched=!1)),i.activeElement&&i.activeElement.matches(r.focusableElements)&&i.activeElement!==c&&i.activeElement.blur();const v=f&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!v||c.isContentEditable||s.preventDefault(),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.animating&&!n.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",s)}function H(e){const t=a(),i=this,s=i.touchEventsData,{params:r,touches:n,rtlTranslate:o,enabled:l}=i;if(!l)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let p,c=e;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==s.touchId)return;if(c.pointerId!==s.pointerId)return}if("touchmove"===c.type){if(p=[...c.changedTouches].filter((e=>e.identifier===s.touchId))[0],!p||p.identifier!==s.touchId)return}else p=c;if(!s.isTouched)return void(s.startMoving&&s.isScrolling&&i.emit("touchMoveOpposite",c));const u=p.pageX,A=p.pageY;if(c.preventedByNestedSwiper)return n.startX=u,void(n.startY=A);if(!i.allowTouchMove)return c.target.matches(s.focusableElements)||(i.allowClick=!1),void(s.isTouched&&(Object.assign(n,{startX:u,startY:A,currentX:u,currentY:A}),s.touchStartTime=d()));if(r.touchReleaseOnEdges&&!r.loop)if(i.isVertical()){if(A<n.startY&&i.translate<=i.maxTranslate()||A>n.startY&&i.translate>=i.minTranslate())return s.isTouched=!1,void(s.isMoved=!1)}else if(u<n.startX&&i.translate<=i.maxTranslate()||u>n.startX&&i.translate>=i.minTranslate())return;if(t.activeElement&&c.target===t.activeElement&&c.target.matches(s.focusableElements))return s.isMoved=!0,void(i.allowClick=!1);s.allowTouchCallbacks&&i.emit("touchMove",c),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=u,n.currentY=A;const m=n.currentX-n.startX,h=n.currentY-n.startY;if(i.params.threshold&&Math.sqrt(m**2+h**2)<i.params.threshold)return;if(void 0===s.isScrolling){let e;i.isHorizontal()&&n.currentY===n.startY||i.isVertical()&&n.currentX===n.startX?s.isScrolling=!1:m*m+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(m))/Math.PI,s.isScrolling=i.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(s.isScrolling&&i.emit("touchMoveOpposite",c),void 0===s.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(s.startMoving=!0)),s.isScrolling||"touchmove"===c.type&&s.preventTouchMoveFromPointerMove)return void(s.isTouched=!1);if(!s.startMoving)return;i.allowClick=!1,!r.cssMode&&c.cancelable&&c.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&c.stopPropagation();let w=i.isHorizontal()?m:h,g=i.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;r.oneWayMovement&&(w=Math.abs(w)*(o?1:-1),g=Math.abs(g)*(o?1:-1)),n.diff=w,w*=r.touchRatio,o&&(w=-w,g=-g);const f=i.touchesDirection;i.swipeDirection=w>0?"prev":"next",i.touchesDirection=g>0?"prev":"next";const v=i.params.loop&&!r.cssMode,b="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!s.isMoved){if(v&&b&&i.loopFix({direction:i.swipeDirection}),s.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});i.wrapperEl.dispatchEvent(e)}s.allowMomentumBounce=!1,!r.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",c)}if((new Date).getTime(),s.isMoved&&s.allowThresholdMove&&f!==i.touchesDirection&&v&&b&&Math.abs(w)>=1)return Object.assign(n,{startX:u,startY:A,currentX:u,currentY:A,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,void(s.startTranslate=s.currentTranslate);i.emit("sliderMove",c),s.isMoved=!0,s.currentTranslate=w+s.startTranslate;let C=!0,y=r.resistanceRatio;if(r.touchReleaseOnEdges&&(y=0),w>0?(v&&b&&s.allowThresholdMove&&s.currentTranslate>(r.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>i.minTranslate()&&(C=!1,r.resistance&&(s.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+s.startTranslate+w)**y))):w<0&&(v&&b&&s.allowThresholdMove&&s.currentTranslate<(r.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===r.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),s.currentTranslate<i.maxTranslate()&&(C=!1,r.resistance&&(s.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-s.startTranslate-w)**y))),C&&(c.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),i.allowSlidePrev||i.allowSlideNext||(s.currentTranslate=s.startTranslate),r.threshold>0){if(!(Math.abs(w)>r.threshold||s.allowThresholdMove))return void(s.currentTranslate=s.startTranslate);if(!s.allowThresholdMove)return s.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,s.currentTranslate=s.startTranslate,void(n.diff=i.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&i.freeMode||r.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),r.freeMode&&r.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(s.currentTranslate),i.setTranslate(s.currentTranslate))}function X(e){const t=this,i=t.touchEventsData;let s,r=e;if(r.originalEvent&&(r=r.originalEvent),"touchend"===r.type||"touchcancel"===r.type){if(s=[...r.changedTouches].filter((e=>e.identifier===i.touchId))[0],!s||s.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(r.pointerId!==i.pointerId)return;s=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)&&(!["pointercancel","contextmenu"].includes(r.type)||!t.browser.isSafari&&!t.browser.isWebView))return;i.pointerId=null,i.touchId=null;const{params:a,touches:n,rtlTranslate:o,slidesGrid:l,enabled:c}=t;if(!c)return;if(!a.simulateTouch&&"mouse"===r.pointerType)return;if(i.allowTouchCallbacks&&t.emit("touchEnd",r),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&a.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);a.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=d(),A=u-i.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),A<300&&u-i.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(i.lastClickTime=d(),p((()=>{t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===n.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let m;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,m=a.followFinger?o?t.translate:-t.translate:-i.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:m});const h=m>=-t.maxTranslate()&&!t.params.loop;let w=0,g=t.slidesSizesGrid[0];for(let e=0;e<l.length;e+=e<a.slidesPerGroupSkip?1:a.slidesPerGroup){const t=e<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;void 0!==l[e+t]?(h||m>=l[e]&&m<l[e+t])&&(w=e,g=l[e+t]-l[e]):(h||m>=l[e])&&(w=e,g=l[l.length-1]-l[l.length-2])}let f=null,v=null;a.rewind&&(t.isBeginning?v=a.virtual&&a.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const b=(m-l[w])/g,C=w<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(A>a.longSwipesMs){if(!a.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=a.longSwipesRatio?t.slideTo(a.rewind&&t.isEnd?f:w+C):t.slideTo(w)),"prev"===t.swipeDirection&&(b>1-a.longSwipesRatio?t.slideTo(w+C):null!==v&&b<0&&Math.abs(b)>a.longSwipesRatio?t.slideTo(v):t.slideTo(w))}else{if(!a.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||r.target!==t.navigation.nextEl&&r.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==f?f:w+C),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:w)):r.target===t.navigation.nextEl?t.slideTo(w+C):t.slideTo(w)}}function j(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:r,snapGrid:a}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=s,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function W(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function V(){const e=this,{wrapperEl:t,rtlTranslate:i,enabled:s}=e;if(!s)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();r=0===a?0:(e.translate-e.minTranslate())/a,r!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function _(e){const t=this;I(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function U(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const Q=(e,t)=>{const i=a(),{params:s,el:r,wrapperEl:n,device:o}=e,l=!!s.nested,p="on"===t?"addEventListener":"removeEventListener",d=t;i[p]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),r[p]("touchstart",e.onTouchStart,{passive:!1}),r[p]("pointerdown",e.onTouchStart,{passive:!1}),i[p]("touchmove",e.onTouchMove,{passive:!1,capture:l}),i[p]("pointermove",e.onTouchMove,{passive:!1,capture:l}),i[p]("touchend",e.onTouchEnd,{passive:!0}),i[p]("pointerup",e.onTouchEnd,{passive:!0}),i[p]("pointercancel",e.onTouchEnd,{passive:!0}),i[p]("touchcancel",e.onTouchEnd,{passive:!0}),i[p]("pointerout",e.onTouchEnd,{passive:!0}),i[p]("pointerleave",e.onTouchEnd,{passive:!0}),i[p]("contextmenu",e.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&r[p]("click",e.onClick,!0),s.cssMode&&n[p]("scroll",e.onScroll),s.updateOnWindowResize?e[d](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",j,!0):e[d]("observerUpdate",j,!0),r[p]("load",e.onLoad,{capture:!0})},Z=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var K={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function J(e,t){return function(i){void 0===i&&(i={});const s=Object.keys(i)[0],r=i[s];"object"==typeof r&&null!==r?(!0===e[s]&&(e[s]={enabled:!0}),"navigation"===s&&e[s]&&e[s].enabled&&!e[s].prevEl&&!e[s].nextEl&&(e[s].auto=!0),["pagination","scrollbar"].indexOf(s)>=0&&e[s]&&e[s].enabled&&!e[s].el&&(e[s].auto=!0),s in e&&"enabled"in r?("object"!=typeof e[s]||"enabled"in e[s]||(e[s].enabled=!0),e[s]||(e[s]={enabled:!1}),A(t,i)):A(t,i)):A(t,i)}}const ee={eventsEmitter:P,update:Y,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:i,translate:s,wrapperEl:r}=this;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;let a=c(r,e);return a+=this.cssOverflowAdjustment(),i&&(a=-a),a||0},setTranslate:function(e,t){const i=this,{rtlTranslate:s,params:r,wrapperEl:a,progress:n}=i;let o,l=0,p=0;i.isHorizontal()?l=s?-e:e:p=e,r.roundLengths&&(l=Math.floor(l),p=Math.floor(p)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:p,r.cssMode?a[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-p:r.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():p-=i.cssOverflowAdjustment(),a.style.transform=`translate3d(${l}px, ${p}px, 0px)`);const d=i.maxTranslate()-i.minTranslate();o=0===d?0:(e-i.minTranslate())/d,o!==n&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===s&&(s=!0);const a=this,{params:n,wrapperEl:o}=a;if(a.animating&&n.preventInteractionOnTransition)return!1;const l=a.minTranslate(),p=a.maxTranslate();let d;if(d=s&&e>l?l:s&&e<p?p:e,a.updateProgress(d),n.cssMode){const e=a.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-d;else{if(!a.support.smoothScroll)return h({swiper:a,targetPosition:-d,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===t?(a.setTransition(0),a.setTranslate(d),i&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(d),i&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,a.animating=!1,i&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${e}ms`,i.wrapperEl.style.transitionDelay=0===e?"0ms":""),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const i=this,{params:s}=i;s.cssMode||(s.autoHeight&&i.updateAutoHeight(),G({swiper:i,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const i=this,{params:s}=i;i.animating=!1,s.cssMode||(i.setTransition(0),G({swiper:i,runCallbacks:e,direction:t,step:"End"}))}},slide:$,loop:N,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const i="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=R.bind(e),e.onTouchMove=H.bind(e),e.onTouchEnd=X.bind(e),e.onDocumentTouchStart=U.bind(e),t.cssMode&&(e.onScroll=V.bind(e)),e.onClick=W.bind(e),e.onLoad=_.bind(e),Q(e,"on")},detachEvents:function(){Q(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:i,params:s,el:r}=e,a=s.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const n=e.getBreakpoint(a,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const o=(n in a?a[n]:void 0)||e.originalParams,l=Z(e,s),p=Z(e,o),d=e.params.grabCursor,c=o.grabCursor,u=s.enabled;l&&!p?(r.classList.remove(`${s.containerModifierClass}grid`,`${s.containerModifierClass}grid-column`),e.emitContainerClasses()):!l&&p&&(r.classList.add(`${s.containerModifierClass}grid`),(o.grid.fill&&"column"===o.grid.fill||!o.grid.fill&&"column"===s.grid.fill)&&r.classList.add(`${s.containerModifierClass}grid-column`),e.emitContainerClasses()),d&&!c?e.unsetGrabCursor():!d&&c&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===o[t])return;const i=s[t]&&s[t].enabled,r=o[t]&&o[t].enabled;i&&!r&&e[t].disable(),!i&&r&&e[t].enable()}));const m=o.direction&&o.direction!==s.direction,h=s.loop&&(o.slidesPerView!==s.slidesPerView||m),w=s.loop;m&&i&&e.changeDirection(),A(e.params,o);const g=e.params.enabled,f=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),u&&!g?e.disable():!u&&g&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",o),i&&(h?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!w&&f?(e.loopCreate(t),e.updateSlides()):w&&!f&&e.loopDestroy()),e.emit("breakpoint",o)},getBreakpoint:function(e,t,i){if(void 0===t&&(t="window"),!e||"container"===t&&!i)return;let s=!1;const r=o(),a="window"===t?r.innerHeight:i.clientHeight,n=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}}));n.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<n.length;e+=1){const{point:a,value:o}=n[e];"window"===t?r.matchMedia(`(min-width: ${o}px)`).matches&&(s=a):o<=i.clientWidth&&(s=a)}return s||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:i}=e,{slidesOffsetBefore:s}=i;if(s){const t=e.slides.length-1,i=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*s;e.isLocked=e.size>i}else e.isLocked=1===e.snapGrid.length;!0===i.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===i.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:i,rtl:s,el:r,device:a}=e,n=function(e,t){const i=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((s=>{e[s]&&i.push(t+s)})):"string"==typeof e&&i.push(t+e)})),i}(["initialized",i.direction,{"free-mode":e.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:s},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);t.push(...n),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},te={};class ie{constructor(){let e,t;for(var i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?t=s[0]:[e,t]=s,t||(t={}),t=A({},t),e&&!t.el&&(t.el=e);const n=a();if(t.el&&"string"==typeof t.el&&n.querySelectorAll(t.el).length>1){const e=[];return n.querySelectorAll(t.el).forEach((i=>{const s=A({},t,{el:i});e.push(new ie(s))})),e}const l=this;l.__swiper__=!0,l.support=z(),l.device=L({userAgent:t.userAgent}),l.browser=(B||(B=function(){const e=o(),t=L();let i=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,s]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));i=e<16||16===e&&s<2}}const r=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),a=s();return{isSafari:i||a,needPerspectiveFix:i,need3dFix:a||r&&t.ios,isWebView:r}}()),B),l.eventsListeners={},l.eventsAnyListeners=[],l.modules=[...l.__modules__],t.modules&&Array.isArray(t.modules)&&l.modules.push(...t.modules);const p={};l.modules.forEach((e=>{e({params:t,swiper:l,extendParams:J(t,p),on:l.on.bind(l),once:l.once.bind(l),off:l.off.bind(l),emit:l.emit.bind(l)})}));const d=A({},K,p);return l.params=A({},d,te,t),l.originalParams=A({},l.params),l.passedParams=A({},t),l.params&&l.params.on&&Object.keys(l.params.on).forEach((e=>{l.on(e,l.params.on[e])})),l.params&&l.params.onAny&&l.onAny(l.params.onAny),Object.assign(l,{enabled:l.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===l.params.direction,isVertical:()=>"vertical"===l.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:l.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.emit("_swiper"),l.params.init&&l.init(),l}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:i}=this,s=y(g(t,`.${i.slideClass}, swiper-slide`)[0]);return y(e)-s}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=g(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const i=this;e=Math.min(Math.max(e,0),1);const s=i.minTranslate(),r=(i.maxTranslate()-s)*e+s;i.translateTo(r,void 0===t?0:t),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((i=>{const s=e.getSlideClasses(i);t.push({slideEl:i,classNames:s}),e.emit("_slideClass",i,s)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:i,slides:s,slidesGrid:r,slidesSizesGrid:a,size:n,activeIndex:o}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let e,t=s[o]?Math.ceil(s[o].swiperSlideSize):0;for(let i=o+1;i<s.length;i+=1)s[i]&&!e&&(t+=Math.ceil(s[i].swiperSlideSize),l+=1,t>n&&(e=!0));for(let i=o-1;i>=0;i-=1)s[i]&&!e&&(t+=s[i].swiperSlideSize,l+=1,t>n&&(e=!0))}else if("current"===e)for(let e=o+1;e<s.length;e+=1)(t?r[e]+a[e]-r[o]<n:r[e]-r[o]<n)&&(l+=1);else for(let e=o-1;e>=0;e-=1)r[o]-r[e]<n&&(l+=1);return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function s(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(i.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&I(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)s(),i.autoHeight&&e.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&e.isEnd&&!i.centeredSlides){const t=e.virtual&&i.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||s()}i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const i=this,s=i.params.direction;return e||(e="horizontal"===s?"vertical":"horizontal"),e===s||"horizontal"!==e&&"vertical"!==e||(i.el.classList.remove(`${i.params.containerModifierClass}${s}`),i.el.classList.add(`${i.params.containerModifierClass}${e}`),i.emitContainerClasses(),i.params.direction=e,i.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let i=e||t.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=t,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const s=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=i&&i.shadowRoot&&i.shadowRoot.querySelector?i.shadowRoot.querySelector(s()):g(i,s())[0];return!r&&t.params.createElements&&(r=v("div",t.params.wrapperClass),i.append(r),g(i,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:i,wrapperEl:r,slidesEl:t.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:r,hostEl:t.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===C(i,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===C(i,"direction")),wrongRTL:"-webkit-box"===C(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const i=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&i.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((e=>{e.complete?I(t,e):e.addEventListener("load",(e=>{I(t,e.target)}))})),O(t),t.initialized=!0,O(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const i=this,{params:s,el:r,wrapperEl:a,slides:n}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttribute("style"),a.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((e=>{i.off(e)})),!1!==e&&(i.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(i)),i.destroyed=!0),null}static extendDefaults(e){A(te,e)}static get extendedDefaults(){return te}static get defaults(){return K}static installModule(e){ie.prototype.__modules__||(ie.prototype.__modules__=[]);const t=ie.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>ie.installModule(e))),ie):(ie.installModule(e),ie)}}function se(e,t,i,s){return e.params.createElements&&Object.keys(s).forEach((r=>{if(!i[r]&&!0===i.auto){let a=g(e.el,`.${s[r]}`)[0];a||(a=v("div",s[r]),a.className=s[r],e.el.append(a)),i[r]=a,t[r]=a}})),i}function re(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;function a(e){let i;return e&&"string"==typeof e&&t.isElement&&(i=t.el.querySelector(e),i)?i:(e&&("string"==typeof e&&(i=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&i&&i.length>1&&1===t.el.querySelectorAll(e).length?i=t.el.querySelector(e):i&&1===i.length&&(i=i[0])),e&&!i?e:i)}function n(e,i){const s=t.params.navigation;(e=T(e)).forEach((e=>{e&&(e.classList[i?"add":"remove"](...s.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=i),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass))}))}function o(){const{nextEl:e,prevEl:i}=t.navigation;if(t.params.loop)return n(i,!1),void n(e,!1);n(i,t.isBeginning&&!t.params.rewind),n(e,t.isEnd&&!t.params.rewind)}function l(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),r("navigationPrev"))}function p(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),r("navigationNext"))}function d(){const e=t.params.navigation;if(t.params.navigation=se(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let i=a(e.nextEl),s=a(e.prevEl);Object.assign(t.navigation,{nextEl:i,prevEl:s}),i=T(i),s=T(s);const r=(i,s)=>{i&&i.addEventListener("click","next"===s?p:l),!t.enabled&&i&&i.classList.add(...e.lockClass.split(" "))};i.forEach((e=>r(e,"next"))),s.forEach((e=>r(e,"prev")))}function c(){let{nextEl:e,prevEl:i}=t.navigation;e=T(e),i=T(i);const s=(e,i)=>{e.removeEventListener("click","next"===i?p:l),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>s(e,"next"))),i.forEach((e=>s(e,"prev")))}i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},s("init",(()=>{!1===t.params.navigation.enabled?u():(d(),o())})),s("toEdge fromEdge lock unlock",(()=>{o()})),s("destroy",(()=>{c()})),s("enable disable",(()=>{let{nextEl:e,prevEl:i}=t.navigation;e=T(e),i=T(i),t.enabled?o():[...e,...i].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),s("click",((e,i)=>{let{nextEl:s,prevEl:a}=t.navigation;s=T(s),a=T(a);const n=i.target;if(t.params.navigation.hideOnClick&&!a.includes(n)&&!s.includes(n)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===n||t.pagination.el.contains(n)))return;let e;s.length?e=s[0].classList.contains(t.params.navigation.hiddenClass):a.length&&(e=a[0].classList.contains(t.params.navigation.hiddenClass)),r(!0===e?"navigationShow":"navigationHide"),[...s,...a].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const u=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),c()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),d(),o()},disable:u,update:o,init:d,destroy:c})}function ae(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function ne(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const a="swiper-pagination";let n;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${a}-bullet`,bulletActiveClass:`${a}-bullet-active`,modifierClass:`${a}-`,currentClass:`${a}-current`,totalClass:`${a}-total`,hiddenClass:`${a}-hidden`,progressbarFillClass:`${a}-progressbar-fill`,progressbarOppositeClass:`${a}-progressbar-opposite`,clickableClass:`${a}-clickable`,lockClass:`${a}-lock`,horizontalClass:`${a}-horizontal`,verticalClass:`${a}-vertical`,paginationDisabledClass:`${a}-disabled`}}),t.pagination={el:null,bullets:[]};let o=0;function l(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function p(e,i){const{bulletActiveClass:s}=t.params.pagination;e&&(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${s}-${i}`),(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&e.classList.add(`${s}-${i}-${i}`))}function d(e){const i=e.target.closest(ae(t.params.pagination.bulletClass));if(!i)return;e.preventDefault();const s=y(i)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===s)return;t.slideToLoop(s)}else t.slideTo(s)}function c(){const e=t.rtl,i=t.params.pagination;if(l())return;let s,a,d=t.pagination.el;d=T(d);const c=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,u=t.params.loop?Math.ceil(c/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(a=t.previousRealIndex||0,s=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(s=t.snapIndex,a=t.previousSnapIndex):(a=t.previousIndex||0,s=t.activeIndex||0),"bullets"===i.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const r=t.pagination.bullets;let l,c,u;if(i.dynamicBullets&&(n=S(r[0],t.isHorizontal()?"width":"height",!0),d.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=n*(i.dynamicMainBullets+4)+"px"})),i.dynamicMainBullets>1&&void 0!==a&&(o+=s-(a||0),o>i.dynamicMainBullets-1?o=i.dynamicMainBullets-1:o<0&&(o=0)),l=Math.max(s-o,0),c=l+(Math.min(r.length,i.dynamicMainBullets)-1),u=(c+l)/2),r.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${i.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),d.length>1)r.forEach((e=>{const r=y(e);r===s?e.classList.add(...i.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),i.dynamicBullets&&(r>=l&&r<=c&&e.classList.add(...`${i.bulletActiveClass}-main`.split(" ")),r===l&&p(e,"prev"),r===c&&p(e,"next"))}));else{const e=r[s];if(e&&e.classList.add(...i.bulletActiveClass.split(" ")),t.isElement&&r.forEach(((e,t)=>{e.setAttribute("part",t===s?"bullet-active":"bullet")})),i.dynamicBullets){const e=r[l],t=r[c];for(let e=l;e<=c;e+=1)r[e]&&r[e].classList.add(...`${i.bulletActiveClass}-main`.split(" "));p(e,"prev"),p(t,"next")}}if(i.dynamicBullets){const s=Math.min(r.length,i.dynamicMainBullets+4),a=(n*s-n)/2-u*n,o=e?"right":"left";r.forEach((e=>{e.style[t.isHorizontal()?o:"top"]=`${a}px`}))}}d.forEach(((e,a)=>{if("fraction"===i.type&&(e.querySelectorAll(ae(i.currentClass)).forEach((e=>{e.textContent=i.formatFractionCurrent(s+1)})),e.querySelectorAll(ae(i.totalClass)).forEach((e=>{e.textContent=i.formatFractionTotal(u)}))),"progressbar"===i.type){let r;r=i.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const a=(s+1)/u;let n=1,o=1;"horizontal"===r?n=a:o=a,e.querySelectorAll(ae(i.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===i.type&&i.renderCustom?(e.innerHTML=i.renderCustom(t,s+1,u),0===a&&r("paginationRender",e)):(0===a&&r("paginationRender",e),r("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass)}))}function u(){const e=t.params.pagination;if(l())return;const i=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let s=t.pagination.el;s=T(s);let a="";if("bullets"===e.type){let s=t.params.loop?Math.ceil(i/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&s>i&&(s=i);for(let i=0;i<s;i+=1)e.renderBullet?a+=e.renderBullet.call(t,i,e.bulletClass):a+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(a=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(a=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],s.forEach((i=>{"custom"!==e.type&&(i.innerHTML=a||""),"bullets"===e.type&&t.pagination.bullets.push(...i.querySelectorAll(ae(e.bulletClass)))})),"custom"!==e.type&&r("paginationRender",s[0])}function A(){t.params.pagination=se(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let i;"string"==typeof e.el&&t.isElement&&(i=t.el.querySelector(e.el)),i||"string"!=typeof e.el||(i=[...document.querySelectorAll(e.el)]),i||(i=e.el),i&&0!==i.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(i)&&i.length>1&&(i=[...t.el.querySelectorAll(e.el)],i.length>1&&(i=i.filter((e=>E(e,".swiper")[0]===t.el))[0])),Array.isArray(i)&&1===i.length&&(i=i[0]),Object.assign(t.pagination,{el:i}),i=T(i),i.forEach((i=>{"bullets"===e.type&&e.clickable&&i.classList.add(...(e.clickableClass||"").split(" ")),i.classList.add(e.modifierClass+e.type),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(i.classList.add(`${e.modifierClass}${e.type}-dynamic`),o=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&i.classList.add(e.progressbarOppositeClass),e.clickable&&i.addEventListener("click",d),t.enabled||i.classList.add(e.lockClass)})))}function m(){const e=t.params.pagination;if(l())return;let i=t.pagination.el;i&&(i=T(i),i.forEach((i=>{i.classList.remove(e.hiddenClass),i.classList.remove(e.modifierClass+e.type),i.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(i.classList.remove(...(e.clickableClass||"").split(" ")),i.removeEventListener("click",d))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}s("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:i}=t.pagination;i=T(i),i.forEach((i=>{i.classList.remove(e.horizontalClass,e.verticalClass),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),s("init",(()=>{!1===t.params.pagination.enabled?h():(A(),u(),c())})),s("activeIndexChange",(()=>{void 0===t.snapIndex&&c()})),s("snapIndexChange",(()=>{c()})),s("snapGridLengthChange",(()=>{u(),c()})),s("destroy",(()=>{m()})),s("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),s("lock unlock",(()=>{c()})),s("click",((e,i)=>{const s=i.target,a=T(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&a&&a.length>0&&!s.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&s===t.navigation.nextEl||t.navigation.prevEl&&s===t.navigation.prevEl))return;const e=a[0].classList.contains(t.params.pagination.hiddenClass);r(!0===e?"paginationShow":"paginationHide"),a.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const h=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),m()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),A(),u(),c()},disable:h,render:u,update:c,init:A,destroy:m})}function oe(e){let{swiper:t,extendParams:i,on:s}=e;i({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let r=!1,n=!1;function o(){const e=t.thumbs.swiper;if(!e||e.destroyed)return;const i=e.clickedIndex,s=e.clickedSlide;if(s&&s.classList.contains(t.params.thumbs.slideThumbActiveClass))return;if(null==i)return;let r;r=e.params.loop?parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10):i,t.params.loop?t.slideToLoop(r):t.slideTo(r)}function l(){const{thumbs:e}=t.params;if(r)return!1;r=!0;const i=t.constructor;if(e.swiper instanceof i)t.thumbs.swiper=e.swiper,Object.assign(t.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(t.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper.update();else if(u(e.swiper)){const s=Object.assign({},e.swiper);Object.assign(s,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper=new i(s),n=!0}return t.thumbs.swiper.el.classList.add(t.params.thumbs.thumbsContainerClass),t.thumbs.swiper.on("tap",o),!0}function p(e){const i=t.thumbs.swiper;if(!i||i.destroyed)return;const s="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView;let r=1;const a=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(r=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(r=1),r=Math.floor(r),i.slides.forEach((e=>e.classList.remove(a))),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<r;e+=1)g(i.slidesEl,`[data-swiper-slide-index="${t.realIndex+e}"]`).forEach((e=>{e.classList.add(a)}));else for(let e=0;e<r;e+=1)i.slides[t.realIndex+e]&&i.slides[t.realIndex+e].classList.add(a);const n=t.params.thumbs.autoScrollOffset,o=n&&!i.params.loop;if(t.realIndex!==i.realIndex||o){const r=i.activeIndex;let a,l;if(i.params.loop){const e=i.slides.filter((e=>e.getAttribute("data-swiper-slide-index")===`${t.realIndex}`))[0];a=i.slides.indexOf(e),l=t.activeIndex>t.previousIndex?"next":"prev"}else a=t.realIndex,l=a>t.previousIndex?"next":"prev";o&&(a+="next"===l?n:-1*n),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(a)<0&&(i.params.centeredSlides?a=a>r?a-Math.floor(s/2)+1:a+Math.floor(s/2)-1:a>r&&i.params.slidesPerGroup,i.slideTo(a,e?0:void 0))}}t.thumbs={swiper:null},s("beforeInit",(()=>{const{thumbs:e}=t.params;if(e&&e.swiper)if("string"==typeof e.swiper||e.swiper instanceof HTMLElement){const i=a(),s=()=>{const s="string"==typeof e.swiper?i.querySelector(e.swiper):e.swiper;if(s&&s.swiper)e.swiper=s.swiper,l(),p(!0);else if(s){const i=r=>{e.swiper=r.detail[0],s.removeEventListener("init",i),l(),p(!0),e.swiper.update(),t.update()};s.addEventListener("init",i)}return s},r=()=>{t.destroyed||s()||requestAnimationFrame(r)};requestAnimationFrame(r)}else l(),p(!0)})),s("slideChange update resize observerUpdate",(()=>{p()})),s("setTransition",((e,i)=>{const s=t.thumbs.swiper;s&&!s.destroyed&&s.setTransition(i)})),s("beforeDestroy",(()=>{const e=t.thumbs.swiper;e&&!e.destroyed&&n&&e.destroy()})),Object.assign(t.thumbs,{init:l,update:p})}function le(e){let{swiper:t,extendParams:i,emit:s,once:r}=e;i({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(t,{freeMode:{onTouchStart:function(){if(t.params.cssMode)return;const e=t.getTranslate();t.setTranslate(e),t.setTransition(0),t.touchEventsData.velocities.length=0,t.freeMode.onTouchEnd({currentPos:t.rtl?t.translate:-t.translate})},onTouchMove:function(){if(t.params.cssMode)return;const{touchEventsData:e,touches:i}=t;0===e.velocities.length&&e.velocities.push({position:i[t.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:i[t.isHorizontal()?"currentX":"currentY"],time:d()})},onTouchEnd:function(e){let{currentPos:i}=e;if(t.params.cssMode)return;const{params:a,wrapperEl:n,rtlTranslate:o,snapGrid:l,touchEventsData:p}=t,c=d()-p.touchStartTime;if(i<-t.minTranslate())t.slideTo(t.activeIndex);else if(i>-t.maxTranslate())t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1);else{if(a.freeMode.momentum){if(p.velocities.length>1){const e=p.velocities.pop(),i=p.velocities.pop(),s=e.position-i.position,r=e.time-i.time;t.velocity=s/r,t.velocity/=2,Math.abs(t.velocity)<a.freeMode.minimumVelocity&&(t.velocity=0),(r>150||d()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=a.freeMode.momentumVelocityRatio,p.velocities.length=0;let e=1e3*a.freeMode.momentumRatio;const i=t.velocity*e;let c=t.translate+i;o&&(c=-c);let u,A=!1;const m=20*Math.abs(t.velocity)*a.freeMode.momentumBounceRatio;let h;if(c<t.maxTranslate())a.freeMode.momentumBounce?(c+t.maxTranslate()<-m&&(c=t.maxTranslate()-m),u=t.maxTranslate(),A=!0,p.allowMomentumBounce=!0):c=t.maxTranslate(),a.loop&&a.centeredSlides&&(h=!0);else if(c>t.minTranslate())a.freeMode.momentumBounce?(c-t.minTranslate()>m&&(c=t.minTranslate()+m),u=t.minTranslate(),A=!0,p.allowMomentumBounce=!0):c=t.minTranslate(),a.loop&&a.centeredSlides&&(h=!0);else if(a.freeMode.sticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-c){e=t;break}c=Math.abs(l[e]-c)<Math.abs(l[e-1]-c)||"next"===t.swipeDirection?l[e]:l[e-1],c=-c}if(h&&r("transitionEnd",(()=>{t.loopFix()})),0!==t.velocity){if(e=o?Math.abs((-c-t.translate)/t.velocity):Math.abs((c-t.translate)/t.velocity),a.freeMode.sticky){const i=Math.abs((o?-c:c)-t.translate),s=t.slidesSizesGrid[t.activeIndex];e=i<s?a.speed:i<2*s?1.5*a.speed:2.5*a.speed}}else if(a.freeMode.sticky)return void t.slideToClosest();a.freeMode.momentumBounce&&A?(t.updateProgress(u),t.setTransition(e),t.setTranslate(c),t.transitionStart(!0,t.swipeDirection),t.animating=!0,x(n,(()=>{t&&!t.destroyed&&p.allowMomentumBounce&&(s("momentumBounce"),t.setTransition(a.speed),setTimeout((()=>{t.setTranslate(u),x(n,(()=>{t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(s("_freeModeNoMomentumRelease"),t.updateProgress(c),t.setTransition(e),t.setTranslate(c),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,x(n,(()=>{t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(c),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(a.freeMode.sticky)return void t.slideToClosest();a.freeMode&&s("_freeModeNoMomentumRelease")}(!a.freeMode.momentum||c>=a.longSwipesMs)&&(s("_freeModeStaticRelease"),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}}}})}function pe(e){const t=this,{params:i,slidesEl:s}=t;i.loop&&t.loopDestroy();const r=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,s.append(t.children[0]),t.innerHTML=""}else s.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&r(e[t]);else r(e);t.recalcSlides(),i.loop&&t.loopCreate(),i.observer&&!t.isElement||t.update()}function de(e){const t=this,{params:i,activeIndex:s,slidesEl:r}=t;i.loop&&t.loopDestroy();let a=s+1;const n=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,r.prepend(t.children[0]),t.innerHTML=""}else r.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&n(e[t]);a=s+e.length}else n(e);t.recalcSlides(),i.loop&&t.loopCreate(),i.observer&&!t.isElement||t.update(),t.slideTo(a,0,!1)}function ce(e,t){const i=this,{params:s,activeIndex:r,slidesEl:a}=i;let n=r;s.loop&&(n-=i.loopedSlides,i.loopDestroy(),i.recalcSlides());const o=i.slides.length;if(e<=0)return void i.prependSlide(t);if(e>=o)return void i.appendSlide(t);let l=n>e?n+1:n;const p=[];for(let t=o-1;t>=e;t-=1){const e=i.slides[t];e.remove(),p.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&a.append(t[e]);l=n>e?n+t.length:n}else a.append(t);for(let e=0;e<p.length;e+=1)a.append(p[e]);i.recalcSlides(),s.loop&&i.loopCreate(),s.observer&&!i.isElement||i.update(),s.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)}function ue(e){const t=this,{params:i,activeIndex:s}=t;let r=s;i.loop&&(r-=t.loopedSlides,t.loopDestroy());let a,n=r;if("object"==typeof e&&"length"in e){for(let i=0;i<e.length;i+=1)a=e[i],t.slides[a]&&t.slides[a].remove(),a<n&&(n-=1);n=Math.max(n,0)}else a=e,t.slides[a]&&t.slides[a].remove(),a<n&&(n-=1),n=Math.max(n,0);t.recalcSlides(),i.loop&&t.loopCreate(),i.observer&&!t.isElement||t.update(),i.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)}function Ae(){const e=this,t=[];for(let i=0;i<e.slides.length;i+=1)t.push(i);e.removeSlide(t)}function me(e){let{swiper:t}=e;Object.assign(t,{appendSlide:pe.bind(t),prependSlide:de.bind(t),addSlide:ce.bind(t),removeSlide:ue.bind(t),removeAllSlides:Ae.bind(t)})}function he(e){const{effect:t,swiper:i,on:s,setTranslate:r,setTransition:a,overwriteParams:n,perspective:o,recreateShadows:l,getEffectParams:p}=e;let d;s("beforeInit",(()=>{if(i.params.effect!==t)return;i.classNames.push(`${i.params.containerModifierClass}${t}`),o&&o()&&i.classNames.push(`${i.params.containerModifierClass}3d`);const e=n?n():{};Object.assign(i.params,e),Object.assign(i.originalParams,e)})),s("setTranslate",(()=>{i.params.effect===t&&r()})),s("setTransition",((e,s)=>{i.params.effect===t&&a(s)})),s("transitionEnd",(()=>{if(i.params.effect===t&&l){if(!p||!p().slideShadows)return;i.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),l()}})),s("virtualUpdate",(()=>{i.params.effect===t&&(i.slides.length||(d=!0),requestAnimationFrame((()=>{d&&i.slides&&i.slides.length&&(r(),d=!1)})))}))}function we(e,t){const i=w(t);return i!==t&&(i.style.backfaceVisibility="hidden",i.style["-webkit-backface-visibility"]="hidden"),i}function ge(e){let{swiper:t,duration:i,transformElements:s,allSlides:r}=e;const{activeIndex:a}=t;if(t.params.virtualTranslate&&0!==i){let e,i=!1;e=r?s:s.filter((e=>{const i=e.classList.contains("swiper-slide-transform")?(e=>e.parentElement?e.parentElement:t.slides.filter((t=>t.shadowRoot&&t.shadowRoot===e.parentNode))[0])(e):e;return t.getSlideIndex(i)===a})),e.forEach((e=>{x(e,(()=>{if(i)return;if(!t||t.destroyed)return;i=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function fe(e,t,i){const s=`swiper-slide-shadow${i?`-${i}`:""}${e?` swiper-slide-shadow-${e}`:""}`,r=w(t);let a=r.querySelector(`.${s.split(" ").join(".")}`);return a||(a=v("div",s.split(" ")),r.append(a)),a}Object.keys(ee).forEach((e=>{Object.keys(ee[e]).forEach((t=>{ie.prototype[t]=ee[e][t]}))})),ie.use([function(e){let{swiper:t,on:i,emit:s}=e;const r=o();let a=null,n=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(s("beforeResize"),s("resize"))},p=()=>{t&&!t.destroyed&&t.initialized&&s("orientationchange")};i("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(a=new ResizeObserver((e=>{n=r.requestAnimationFrame((()=>{const{width:i,height:s}=t;let r=i,a=s;e.forEach((e=>{let{contentBoxSize:i,contentRect:s,target:n}=e;n&&n!==t.el||(r=s?s.width:(i[0]||i).inlineSize,a=s?s.height:(i[0]||i).blockSize)})),r===i&&a===s||l()}))})),a.observe(t.el)):(r.addEventListener("resize",l),r.addEventListener("orientationchange",p))})),i("destroy",(()=>{n&&r.cancelAnimationFrame(n),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null),r.removeEventListener("resize",l),r.removeEventListener("orientationchange",p)}))},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const a=[],n=o(),l=function(e,i){void 0===i&&(i={});const s=new(n.MutationObserver||n.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const i=function(){r("observerUpdate",e[0])};n.requestAnimationFrame?n.requestAnimationFrame(i):n.setTimeout(i,0)}));s.observe(e,{attributes:void 0===i.attributes||i.attributes,childList:void 0===i.childList||i.childList,characterData:void 0===i.characterData||i.characterData}),a.push(s)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=E(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),s("destroy",(()=>{a.forEach((e=>{e.disconnect()})),a.splice(0,a.length)}))}]);const ve=[function(e){let t,{swiper:i,extendParams:s,on:r,emit:n}=e;s({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const o=a();i.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const l=o.createElement("div");function p(e,t){const s=i.params.virtual;if(s.cache&&i.virtual.cache[t])return i.virtual.cache[t];let r;return s.renderSlide?(r=s.renderSlide.call(i,e,t),"string"==typeof r&&(l.innerHTML=r,r=l.children[0])):r=i.isElement?v("swiper-slide"):v("div",i.params.slideClass),r.setAttribute("data-swiper-slide-index",t),s.renderSlide||(r.innerHTML=e),s.cache&&(i.virtual.cache[t]=r),r}function d(e,t){const{slidesPerView:s,slidesPerGroup:r,centeredSlides:a,loop:o,initialSlide:l}=i.params;if(t&&!o&&l>0)return;const{addSlidesBefore:d,addSlidesAfter:c}=i.params.virtual,{from:u,to:A,slides:m,slidesGrid:h,offset:w}=i.virtual;i.params.cssMode||i.updateActiveIndex();const f=i.activeIndex||0;let v,b,C;v=i.rtlTranslate?"right":i.isHorizontal()?"left":"top",a?(b=Math.floor(s/2)+r+c,C=Math.floor(s/2)+r+d):(b=s+(r-1)+c,C=(o?s:r)+d);let y=f-C,E=f+b;o||(y=Math.max(y,0),E=Math.min(E,m.length-1));let x=(i.slidesGrid[y]||0)-(i.slidesGrid[0]||0);function S(){i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),n("virtualUpdate")}if(o&&f>=C?(y-=C,a||(x+=i.slidesGrid[0])):o&&f<C&&(y=-C,a&&(x+=i.slidesGrid[0])),Object.assign(i.virtual,{from:y,to:E,offset:x,slidesGrid:i.slidesGrid,slidesBefore:C,slidesAfter:b}),u===y&&A===E&&!e)return i.slidesGrid!==h&&x!==w&&i.slides.forEach((e=>{e.style[v]=x-Math.abs(i.cssOverflowAdjustment())+"px"})),i.updateProgress(),void n("virtualUpdate");if(i.params.virtual.renderExternal)return i.params.virtual.renderExternal.call(i,{offset:x,from:y,to:E,slides:function(){const e=[];for(let t=y;t<=E;t+=1)e.push(m[t]);return e}()}),void(i.params.virtual.renderExternalUpdate?S():n("virtualUpdate"));const T=[],M=[],k=e=>{let t=e;return e<0?t=m.length+e:t>=m.length&&(t-=m.length),t};if(e)i.slides.filter((e=>e.matches(`.${i.params.slideClass}, swiper-slide`))).forEach((e=>{e.remove()}));else for(let e=u;e<=A;e+=1)if(e<y||e>E){const t=k(e);i.slides.filter((e=>e.matches(`.${i.params.slideClass}[data-swiper-slide-index="${t}"], swiper-slide[data-swiper-slide-index="${t}"]`))).forEach((e=>{e.remove()}))}const B=o?-m.length:0,z=o?2*m.length:m.length;for(let t=B;t<z;t+=1)if(t>=y&&t<=E){const i=k(t);void 0===A||e?M.push(i):(t>A&&M.push(i),t<u&&T.push(i))}if(M.forEach((e=>{i.slidesEl.append(p(m[e],e))})),o)for(let e=T.length-1;e>=0;e-=1){const t=T[e];i.slidesEl.prepend(p(m[t],t))}else T.sort(((e,t)=>t-e)),T.forEach((e=>{i.slidesEl.prepend(p(m[e],e))}));g(i.slidesEl,".swiper-slide, swiper-slide").forEach((e=>{e.style[v]=x-Math.abs(i.cssOverflowAdjustment())+"px"})),S()}r("beforeInit",(()=>{if(!i.params.virtual.enabled)return;let e;if(void 0===i.passedParams.virtual.slides){const t=[...i.slidesEl.children].filter((e=>e.matches(`.${i.params.slideClass}, swiper-slide`)));t&&t.length&&(i.virtual.slides=[...t],e=!0,t.forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t),i.virtual.cache[t]=e,e.remove()})))}e||(i.virtual.slides=i.params.virtual.slides),i.classNames.push(`${i.params.containerModifierClass}virtual`),i.params.watchSlidesProgress=!0,i.originalParams.watchSlidesProgress=!0,d(!1,!0)})),r("setTranslate",(()=>{i.params.virtual.enabled&&(i.params.cssMode&&!i._immediateVirtual?(clearTimeout(t),t=setTimeout((()=>{d()}),100)):d())})),r("init update resize",(()=>{i.params.virtual.enabled&&i.params.cssMode&&m(i.wrapperEl,"--swiper-virtual-size",`${i.virtualSize}px`)})),Object.assign(i.virtual,{appendSlide:function(e){if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i.virtual.slides.push(e[t]);else i.virtual.slides.push(e);d(!0)},prependSlide:function(e){const t=i.activeIndex;let s=t+1,r=1;if(Array.isArray(e)){for(let t=0;t<e.length;t+=1)e[t]&&i.virtual.slides.unshift(e[t]);s=t+e.length,r=e.length}else i.virtual.slides.unshift(e);if(i.params.virtual.cache){const e=i.virtual.cache,t={};Object.keys(e).forEach((i=>{const s=e[i],a=s.getAttribute("data-swiper-slide-index");a&&s.setAttribute("data-swiper-slide-index",parseInt(a,10)+r),t[parseInt(i,10)+r]=s})),i.virtual.cache=t}d(!0),i.slideTo(s,0)},removeSlide:function(e){if(null==e)return;let t=i.activeIndex;if(Array.isArray(e))for(let s=e.length-1;s>=0;s-=1)i.params.virtual.cache&&(delete i.virtual.cache[e[s]],Object.keys(i.virtual.cache).forEach((t=>{t>e&&(i.virtual.cache[t-1]=i.virtual.cache[t],i.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete i.virtual.cache[t])}))),i.virtual.slides.splice(e[s],1),e[s]<t&&(t-=1),t=Math.max(t,0);else i.params.virtual.cache&&(delete i.virtual.cache[e],Object.keys(i.virtual.cache).forEach((t=>{t>e&&(i.virtual.cache[t-1]=i.virtual.cache[t],i.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete i.virtual.cache[t])}))),i.virtual.slides.splice(e,1),e<t&&(t-=1),t=Math.max(t,0);d(!0),i.slideTo(t,0)},removeAllSlides:function(){i.virtual.slides=[],i.params.virtual.cache&&(i.virtual.cache={}),d(!0),i.slideTo(0,0)},update:d})},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=a(),l=o();function p(e){if(!t.enabled)return;const{rtlTranslate:i}=t;let s=e;s.originalEvent&&(s=s.originalEvent);const a=s.keyCode||s.charCode,o=t.params.keyboard.pageUpDown,p=o&&33===a,d=o&&34===a,c=37===a,u=39===a,A=38===a,m=40===a;if(!t.allowSlideNext&&(t.isHorizontal()&&u||t.isVertical()&&m||d))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&c||t.isVertical()&&A||p))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||n.activeElement&&n.activeElement.nodeName&&("input"===n.activeElement.nodeName.toLowerCase()||"textarea"===n.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(p||d||c||u||A||m)){let e=!1;if(E(t.el,`.${t.params.slideClass}, swiper-slide`).length>0&&0===E(t.el,`.${t.params.slideActiveClass}`).length)return;const s=t.el,r=s.clientWidth,a=s.clientHeight,n=l.innerWidth,o=l.innerHeight,p=b(s);i&&(p.left-=s.scrollLeft);const d=[[p.left,p.top],[p.left+r,p.top],[p.left,p.top+a],[p.left+r,p.top+a]];for(let t=0;t<d.length;t+=1){const i=d[t];if(i[0]>=0&&i[0]<=n&&i[1]>=0&&i[1]<=o){if(0===i[0]&&0===i[1])continue;e=!0}}if(!e)return}t.isHorizontal()?((p||d||c||u)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),((d||u)&&!i||(p||c)&&i)&&t.slideNext(),((p||c)&&!i||(d||u)&&i)&&t.slidePrev()):((p||d||A||m)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),(d||m)&&t.slideNext(),(p||A)&&t.slidePrev()),r("keyPress",a)}}function d(){t.keyboard.enabled||(n.addEventListener("keydown",p),t.keyboard.enabled=!0)}function c(){t.keyboard.enabled&&(n.removeEventListener("keydown",p),t.keyboard.enabled=!1)}t.keyboard={enabled:!1},i({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),s("init",(()=>{t.params.keyboard.enabled&&d()})),s("destroy",(()=>{t.keyboard.enabled&&c()})),Object.assign(t.keyboard,{enable:d,disable:c})},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const a=o();let n;i({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),t.mousewheel={enabled:!1};let l,c=d();const u=[];function A(){t.enabled&&(t.mouseEntered=!0)}function m(){t.enabled&&(t.mouseEntered=!1)}function h(e){return!(t.params.mousewheel.thresholdDelta&&e.delta<t.params.mousewheel.thresholdDelta||t.params.mousewheel.thresholdTime&&d()-c<t.params.mousewheel.thresholdTime||!(e.delta>=6&&d()-c<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),r("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),r("scroll",e.raw)),c=(new a.Date).getTime(),1))}function w(e){let i=e,s=!0;if(!t.enabled)return;if(e.target.closest(`.${t.params.mousewheel.noMousewheelClass}`))return;const a=t.params.mousewheel;t.params.cssMode&&i.preventDefault();let o=t.el;"container"!==t.params.mousewheel.eventsTarget&&(o=document.querySelector(t.params.mousewheel.eventsTarget));const c=o&&o.contains(i.target);if(!t.mouseEntered&&!c&&!a.releaseOnEdges)return!0;i.originalEvent&&(i=i.originalEvent);let A=0;const m=t.rtlTranslate?-1:1,w=function(e){let t=0,i=0,s=0,r=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,r=10*i,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=r,r=0),(s||r)&&e.deltaMode&&(1===e.deltaMode?(s*=40,r*=40):(s*=800,r*=800)),s&&!t&&(t=s<1?-1:1),r&&!i&&(i=r<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:r}}(i);if(a.forceToAxis)if(t.isHorizontal()){if(!(Math.abs(w.pixelX)>Math.abs(w.pixelY)))return!0;A=-w.pixelX*m}else{if(!(Math.abs(w.pixelY)>Math.abs(w.pixelX)))return!0;A=-w.pixelY}else A=Math.abs(w.pixelX)>Math.abs(w.pixelY)?-w.pixelX*m:-w.pixelY;if(0===A)return!0;a.invert&&(A=-A);let g=t.getTranslate()+A*a.sensitivity;if(g>=t.minTranslate()&&(g=t.minTranslate()),g<=t.maxTranslate()&&(g=t.maxTranslate()),s=!!t.params.loop||!(g===t.minTranslate()||g===t.maxTranslate()),s&&t.params.nested&&i.stopPropagation(),t.params.freeMode&&t.params.freeMode.enabled){const e={time:d(),delta:Math.abs(A),direction:Math.sign(A)},s=l&&e.time<l.time+500&&e.delta<=l.delta&&e.direction===l.direction;if(!s){l=void 0;let o=t.getTranslate()+A*a.sensitivity;const d=t.isBeginning,c=t.isEnd;if(o>=t.minTranslate()&&(o=t.minTranslate()),o<=t.maxTranslate()&&(o=t.maxTranslate()),t.setTransition(0),t.setTranslate(o),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses(),(!d&&t.isBeginning||!c&&t.isEnd)&&t.updateSlidesClasses(),t.params.loop&&t.loopFix({direction:e.direction<0?"next":"prev",byMousewheel:!0}),t.params.freeMode.sticky){clearTimeout(n),n=void 0,u.length>=15&&u.shift();const i=u.length?u[u.length-1]:void 0,s=u[0];if(u.push(e),i&&(e.delta>i.delta||e.direction!==i.direction))u.splice(0);else if(u.length>=15&&e.time-s.time<500&&s.delta-e.delta>=1&&e.delta<=6){const i=A>0?.8:.2;l=e,u.splice(0),n=p((()=>{t.slideToClosest(t.params.speed,!0,void 0,i)}),0)}n||(n=p((()=>{l=e,u.splice(0),t.slideToClosest(t.params.speed,!0,void 0,.5)}),500))}if(s||r("scroll",i),t.params.autoplay&&t.params.autoplayDisableOnInteraction&&t.autoplay.stop(),a.releaseOnEdges&&(o===t.minTranslate()||o===t.maxTranslate()))return!0}}else{const i={time:d(),delta:Math.abs(A),direction:Math.sign(A),raw:e};u.length>=2&&u.shift();const s=u.length?u[u.length-1]:void 0;if(u.push(i),s?(i.direction!==s.direction||i.delta>s.delta||i.time>s.time+150)&&h(i):h(i),function(e){const i=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&i.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&i.releaseOnEdges)return!0;return!1}(i))return!0}return i.preventDefault?i.preventDefault():i.returnValue=!1,!1}function g(e){let i=t.el;"container"!==t.params.mousewheel.eventsTarget&&(i=document.querySelector(t.params.mousewheel.eventsTarget)),i[e]("mouseenter",A),i[e]("mouseleave",m),i[e]("wheel",w)}function f(){return t.params.cssMode?(t.wrapperEl.removeEventListener("wheel",w),!0):!t.mousewheel.enabled&&(g("addEventListener"),t.mousewheel.enabled=!0,!0)}function v(){return t.params.cssMode?(t.wrapperEl.addEventListener(event,w),!0):!!t.mousewheel.enabled&&(g("removeEventListener"),t.mousewheel.enabled=!1,!0)}s("init",(()=>{!t.params.mousewheel.enabled&&t.params.cssMode&&v(),t.params.mousewheel.enabled&&f()})),s("destroy",(()=>{t.params.cssMode&&f(),t.mousewheel.enabled&&v()})),Object.assign(t.mousewheel,{enable:f,disable:v})},re,ne,function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=a();let o,d,c,u,A=!1,m=null,h=null;function w(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e,rtlTranslate:i}=t,{dragEl:s,el:r}=e,a=t.params.scrollbar,n=t.params.loop?t.progressLoop:t.progress;let o=d,l=(c-d)*n;i?(l=-l,l>0?(o=d-l,l=0):-l+d>c&&(o=c+l)):l<0?(o=d+l,l=0):l+d>c&&(o=c-l),t.isHorizontal()?(s.style.transform=`translate3d(${l}px, 0, 0)`,s.style.width=`${o}px`):(s.style.transform=`translate3d(0px, ${l}px, 0)`,s.style.height=`${o}px`),a.hide&&(clearTimeout(m),r.style.opacity=1,m=setTimeout((()=>{r.style.opacity=0,r.style.transitionDuration="400ms"}),1e3))}function g(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e}=t,{dragEl:i,el:s}=e;i.style.width="",i.style.height="",c=t.isHorizontal()?s.offsetWidth:s.offsetHeight,u=t.size/(t.virtualSize+t.params.slidesOffsetBefore-(t.params.centeredSlides?t.snapGrid[0]:0)),d="auto"===t.params.scrollbar.dragSize?c*u:parseInt(t.params.scrollbar.dragSize,10),t.isHorizontal()?i.style.width=`${d}px`:i.style.height=`${d}px`,s.style.display=u>=1?"none":"",t.params.scrollbar.hide&&(s.style.opacity=0),t.params.watchOverflow&&t.enabled&&e.el.classList[t.isLocked?"add":"remove"](t.params.scrollbar.lockClass)}function f(e){return t.isHorizontal()?e.clientX:e.clientY}function C(e){const{scrollbar:i,rtlTranslate:s}=t,{el:r}=i;let a;a=(f(e)-b(r)[t.isHorizontal()?"left":"top"]-(null!==o?o:d/2))/(c-d),a=Math.max(Math.min(a,1),0),s&&(a=1-a);const n=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*a;t.updateProgress(n),t.setTranslate(n),t.updateActiveIndex(),t.updateSlidesClasses()}function y(e){const i=t.params.scrollbar,{scrollbar:s,wrapperEl:a}=t,{el:n,dragEl:l}=s;A=!0,o=e.target===l?f(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),a.style.transitionDuration="100ms",l.style.transitionDuration="100ms",C(e),clearTimeout(h),n.style.transitionDuration="0ms",i.hide&&(n.style.opacity=1),t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="none"),r("scrollbarDragStart",e)}function E(e){const{scrollbar:i,wrapperEl:s}=t,{el:a,dragEl:n}=i;A&&(e.preventDefault&&e.cancelable?e.preventDefault():e.returnValue=!1,C(e),s.style.transitionDuration="0ms",a.style.transitionDuration="0ms",n.style.transitionDuration="0ms",r("scrollbarDragMove",e))}function x(e){const i=t.params.scrollbar,{scrollbar:s,wrapperEl:a}=t,{el:n}=s;A&&(A=!1,t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="",a.style.transitionDuration=""),i.hide&&(clearTimeout(h),h=p((()=>{n.style.opacity=0,n.style.transitionDuration="400ms"}),1e3)),r("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())}function S(e){const{scrollbar:i,params:s}=t,r=i.el;if(!r)return;const a=r,o=!!s.passiveListeners&&{passive:!1,capture:!1},l=!!s.passiveListeners&&{passive:!0,capture:!1};if(!a)return;const p="on"===e?"addEventListener":"removeEventListener";a[p]("pointerdown",y,o),n[p]("pointermove",E,o),n[p]("pointerup",x,l)}function M(){const{scrollbar:e,el:i}=t;t.params.scrollbar=se(t,t.originalParams.scrollbar,t.params.scrollbar,{el:"swiper-scrollbar"});const s=t.params.scrollbar;if(!s.el)return;let r,a;if("string"==typeof s.el&&t.isElement&&(r=t.el.querySelector(s.el)),r||"string"!=typeof s.el)r||(r=s.el);else if(r=n.querySelectorAll(s.el),!r.length)return;t.params.uniqueNavElements&&"string"==typeof s.el&&r.length>1&&1===i.querySelectorAll(s.el).length&&(r=i.querySelector(s.el)),r.length>0&&(r=r[0]),r.classList.add(t.isHorizontal()?s.horizontalClass:s.verticalClass),r&&(a=r.querySelector(ae(t.params.scrollbar.dragClass)),a||(a=v("div",t.params.scrollbar.dragClass),r.append(a))),Object.assign(e,{el:r,dragEl:a}),s.draggable&&t.params.scrollbar.el&&t.scrollbar.el&&S("on"),r&&r.classList[t.enabled?"remove":"add"](...l(t.params.scrollbar.lockClass))}function k(){const e=t.params.scrollbar,i=t.scrollbar.el;i&&i.classList.remove(...l(t.isHorizontal()?e.horizontalClass:e.verticalClass)),t.params.scrollbar.el&&t.scrollbar.el&&S("off")}i({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),t.scrollbar={el:null,dragEl:null},s("changeDirection",(()=>{if(!t.scrollbar||!t.scrollbar.el)return;const e=t.params.scrollbar;let{el:i}=t.scrollbar;i=T(i),i.forEach((i=>{i.classList.remove(e.horizontalClass,e.verticalClass),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),s("init",(()=>{!1===t.params.scrollbar.enabled?B():(M(),g(),w())})),s("update resize observerUpdate lock unlock changeDirection",(()=>{g()})),s("setTranslate",(()=>{w()})),s("setTransition",((e,i)=>{!function(e){t.params.scrollbar.el&&t.scrollbar.el&&(t.scrollbar.dragEl.style.transitionDuration=`${e}ms`)}(i)})),s("enable disable",(()=>{const{el:e}=t.scrollbar;e&&e.classList[t.enabled?"remove":"add"](...l(t.params.scrollbar.lockClass))})),s("destroy",(()=>{k()}));const B=()=>{t.el.classList.add(...l(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.add(...l(t.params.scrollbar.scrollbarDisabledClass)),k()};Object.assign(t.scrollbar,{enable:()=>{t.el.classList.remove(...l(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.remove(...l(t.params.scrollbar.scrollbarDisabledClass)),M(),g(),w()},disable:B,updateSize:g,setTranslate:w,init:M,destroy:k})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({parallax:{enabled:!1}});const r="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",a=(e,i)=>{const{rtl:s}=t,r=s?-1:1,a=e.getAttribute("data-swiper-parallax")||"0";let n=e.getAttribute("data-swiper-parallax-x"),o=e.getAttribute("data-swiper-parallax-y");const l=e.getAttribute("data-swiper-parallax-scale"),p=e.getAttribute("data-swiper-parallax-opacity"),d=e.getAttribute("data-swiper-parallax-rotate");if(n||o?(n=n||"0",o=o||"0"):t.isHorizontal()?(n=a,o="0"):(o=a,n="0"),n=n.indexOf("%")>=0?parseInt(n,10)*i*r+"%":n*i*r+"px",o=o.indexOf("%")>=0?parseInt(o,10)*i+"%":o*i+"px",null!=p){const t=p-(p-1)*(1-Math.abs(i));e.style.opacity=t}let c=`translate3d(${n}, ${o}, 0px)`;null!=l&&(c+=` scale(${l-(l-1)*(1-Math.abs(i))})`),d&&null!=d&&(c+=` rotate(${d*i*-1}deg)`),e.style.transform=c},n=()=>{const{el:e,slides:i,progress:s,snapGrid:n,isElement:o}=t,l=g(e,r);t.isElement&&l.push(...g(t.hostEl,r)),l.forEach((e=>{a(e,s)})),i.forEach(((e,i)=>{let o=e.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(o+=Math.ceil(i/2)-s*(n.length-1)),o=Math.min(Math.max(o,-1),1),e.querySelectorAll(`${r}, [data-swiper-parallax-rotate]`).forEach((e=>{a(e,o)}))}))};s("beforeInit",(()=>{t.params.parallax.enabled&&(t.params.watchSlidesProgress=!0,t.originalParams.watchSlidesProgress=!0)})),s("init",(()=>{t.params.parallax.enabled&&n()})),s("setTranslate",(()=>{t.params.parallax.enabled&&n()})),s("setTransition",((e,i)=>{t.params.parallax.enabled&&function(e){void 0===e&&(e=t.params.speed);const{el:i,hostEl:s}=t,a=[...i.querySelectorAll(r)];t.isElement&&a.push(...s.querySelectorAll(r)),a.forEach((t=>{let i=parseInt(t.getAttribute("data-swiper-parallax-duration"),10)||e;0===e&&(i=0),t.style.transitionDuration=`${i}ms`}))}(i)}))},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const a=o();i({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),t.zoom={enabled:!1};let n,l,p=1,d=!1;const u=[],A={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},m={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},h={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let w,f=1;function v(){if(u.length<2)return 1;const e=u[0].pageX,t=u[0].pageY,i=u[1].pageX,s=u[1].pageY;return Math.sqrt((i-e)**2+(s-t)**2)}function C(){const e=t.params.zoom,i=A.imageWrapEl.getAttribute("data-swiper-zoom")||e.maxRatio;if(e.limitToOriginalSize&&A.imageEl&&A.imageEl.naturalWidth){const e=A.imageEl.naturalWidth/A.imageEl.offsetWidth;return Math.min(e,i)}return i}function y(e){const i=t.isElement?"swiper-slide":`.${t.params.slideClass}`;return!!e.target.matches(i)||t.slides.filter((t=>t.contains(e.target))).length>0}function x(e){if("mouse"===e.pointerType&&u.splice(0,u.length),!y(e))return;const i=t.params.zoom;if(n=!1,l=!1,u.push(e),!(u.length<2)){if(n=!0,A.scaleStart=v(),!A.slideEl){A.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`),A.slideEl||(A.slideEl=t.slides[t.activeIndex]);let s=A.slideEl.querySelector(`.${i.containerClass}`);if(s&&(s=s.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),A.imageEl=s,A.imageWrapEl=s?E(A.imageEl,`.${i.containerClass}`)[0]:void 0,!A.imageWrapEl)return void(A.imageEl=void 0);A.maxRatio=C()}if(A.imageEl){const[e,t]=function(){if(u.length<2)return{x:null,y:null};const e=A.imageEl.getBoundingClientRect();return[(u[0].pageX+(u[1].pageX-u[0].pageX)/2-e.x-a.scrollX)/p,(u[0].pageY+(u[1].pageY-u[0].pageY)/2-e.y-a.scrollY)/p]}();A.originX=e,A.originY=t,A.imageEl.style.transitionDuration="0ms"}d=!0}}function S(e){if(!y(e))return;const i=t.params.zoom,s=t.zoom,r=u.findIndex((t=>t.pointerId===e.pointerId));r>=0&&(u[r]=e),u.length<2||(l=!0,A.scaleMove=v(),A.imageEl&&(s.scale=A.scaleMove/A.scaleStart*p,s.scale>A.maxRatio&&(s.scale=A.maxRatio-1+(s.scale-A.maxRatio+1)**.5),s.scale<i.minRatio&&(s.scale=i.minRatio+1-(i.minRatio-s.scale+1)**.5),A.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`))}function T(e){if(!y(e))return;if("mouse"===e.pointerType&&"pointerout"===e.type)return;const i=t.params.zoom,s=t.zoom,r=u.findIndex((t=>t.pointerId===e.pointerId));r>=0&&u.splice(r,1),n&&l&&(n=!1,l=!1,A.imageEl&&(s.scale=Math.max(Math.min(s.scale,A.maxRatio),i.minRatio),A.imageEl.style.transitionDuration=`${t.params.speed}ms`,A.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`,p=s.scale,d=!1,s.scale>1&&A.slideEl?A.slideEl.classList.add(`${i.zoomedSlideClass}`):s.scale<=1&&A.slideEl&&A.slideEl.classList.remove(`${i.zoomedSlideClass}`),1===s.scale&&(A.originX=0,A.originY=0,A.slideEl=void 0)))}function M(){t.touchEventsData.preventTouchMoveFromPointerMove=!1}function k(e){if(!y(e)||!function(e){const i=`.${t.params.zoom.containerClass}`;return!!e.target.matches(i)||[...t.hostEl.querySelectorAll(i)].filter((t=>t.contains(e.target))).length>0}(e))return;const i=t.zoom;if(!A.imageEl)return;if(!m.isTouched||!A.slideEl)return;m.isMoved||(m.width=A.imageEl.offsetWidth||A.imageEl.clientWidth,m.height=A.imageEl.offsetHeight||A.imageEl.clientHeight,m.startX=c(A.imageWrapEl,"x")||0,m.startY=c(A.imageWrapEl,"y")||0,A.slideWidth=A.slideEl.offsetWidth,A.slideHeight=A.slideEl.offsetHeight,A.imageWrapEl.style.transitionDuration="0ms");const s=m.width*i.scale,r=m.height*i.scale;if(s<A.slideWidth&&r<A.slideHeight)return void M();if(m.minX=Math.min(A.slideWidth/2-s/2,0),m.maxX=-m.minX,m.minY=Math.min(A.slideHeight/2-r/2,0),m.maxY=-m.minY,m.touchesCurrent.x=u.length>0?u[0].pageX:e.pageX,m.touchesCurrent.y=u.length>0?u[0].pageY:e.pageY,Math.max(Math.abs(m.touchesCurrent.x-m.touchesStart.x),Math.abs(m.touchesCurrent.y-m.touchesStart.y))>5&&(t.allowClick=!1),!m.isMoved&&!d){if(t.isHorizontal()&&(Math.floor(m.minX)===Math.floor(m.startX)&&m.touchesCurrent.x<m.touchesStart.x||Math.floor(m.maxX)===Math.floor(m.startX)&&m.touchesCurrent.x>m.touchesStart.x))return m.isTouched=!1,void M();if(!t.isHorizontal()&&(Math.floor(m.minY)===Math.floor(m.startY)&&m.touchesCurrent.y<m.touchesStart.y||Math.floor(m.maxY)===Math.floor(m.startY)&&m.touchesCurrent.y>m.touchesStart.y))return m.isTouched=!1,void M()}e.cancelable&&e.preventDefault(),e.stopPropagation(),clearTimeout(w),t.touchEventsData.preventTouchMoveFromPointerMove=!0,w=setTimeout((()=>{M()})),m.isMoved=!0;const a=(i.scale-p)/(A.maxRatio-t.params.zoom.minRatio),{originX:n,originY:o}=A;m.currentX=m.touchesCurrent.x-m.touchesStart.x+m.startX+a*(m.width-2*n),m.currentY=m.touchesCurrent.y-m.touchesStart.y+m.startY+a*(m.height-2*o),m.currentX<m.minX&&(m.currentX=m.minX+1-(m.minX-m.currentX+1)**.8),m.currentX>m.maxX&&(m.currentX=m.maxX-1+(m.currentX-m.maxX+1)**.8),m.currentY<m.minY&&(m.currentY=m.minY+1-(m.minY-m.currentY+1)**.8),m.currentY>m.maxY&&(m.currentY=m.maxY-1+(m.currentY-m.maxY+1)**.8),h.prevPositionX||(h.prevPositionX=m.touchesCurrent.x),h.prevPositionY||(h.prevPositionY=m.touchesCurrent.y),h.prevTime||(h.prevTime=Date.now()),h.x=(m.touchesCurrent.x-h.prevPositionX)/(Date.now()-h.prevTime)/2,h.y=(m.touchesCurrent.y-h.prevPositionY)/(Date.now()-h.prevTime)/2,Math.abs(m.touchesCurrent.x-h.prevPositionX)<2&&(h.x=0),Math.abs(m.touchesCurrent.y-h.prevPositionY)<2&&(h.y=0),h.prevPositionX=m.touchesCurrent.x,h.prevPositionY=m.touchesCurrent.y,h.prevTime=Date.now(),A.imageWrapEl.style.transform=`translate3d(${m.currentX}px, ${m.currentY}px,0)`}function B(){const e=t.zoom;A.slideEl&&t.activeIndex!==t.slides.indexOf(A.slideEl)&&(A.imageEl&&(A.imageEl.style.transform="translate3d(0,0,0) scale(1)"),A.imageWrapEl&&(A.imageWrapEl.style.transform="translate3d(0,0,0)"),A.slideEl.classList.remove(`${t.params.zoom.zoomedSlideClass}`),e.scale=1,p=1,A.slideEl=void 0,A.imageEl=void 0,A.imageWrapEl=void 0,A.originX=0,A.originY=0)}function z(e){const i=t.zoom,s=t.params.zoom;if(!A.slideEl){e&&e.target&&(A.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`)),A.slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?A.slideEl=g(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:A.slideEl=t.slides[t.activeIndex]);let i=A.slideEl.querySelector(`.${s.containerClass}`);i&&(i=i.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),A.imageEl=i,A.imageWrapEl=i?E(A.imageEl,`.${s.containerClass}`)[0]:void 0}if(!A.imageEl||!A.imageWrapEl)return;let r,n,o,l,d,c,u,h,w,f,v,y,x,S,T,M,k,B;t.params.cssMode&&(t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.touchAction="none"),A.slideEl.classList.add(`${s.zoomedSlideClass}`),void 0===m.touchesStart.x&&e?(r=e.pageX,n=e.pageY):(r=m.touchesStart.x,n=m.touchesStart.y);const z="number"==typeof e?e:null;1===p&&z&&(r=void 0,n=void 0);const L=C();i.scale=z||L,p=z||L,!e||1===p&&z?(u=0,h=0):(k=A.slideEl.offsetWidth,B=A.slideEl.offsetHeight,o=b(A.slideEl).left+a.scrollX,l=b(A.slideEl).top+a.scrollY,d=o+k/2-r,c=l+B/2-n,w=A.imageEl.offsetWidth||A.imageEl.clientWidth,f=A.imageEl.offsetHeight||A.imageEl.clientHeight,v=w*i.scale,y=f*i.scale,x=Math.min(k/2-v/2,0),S=Math.min(B/2-y/2,0),T=-x,M=-S,u=d*i.scale,h=c*i.scale,u<x&&(u=x),u>T&&(u=T),h<S&&(h=S),h>M&&(h=M)),z&&1===i.scale&&(A.originX=0,A.originY=0),A.imageWrapEl.style.transitionDuration="300ms",A.imageWrapEl.style.transform=`translate3d(${u}px, ${h}px,0)`,A.imageEl.style.transitionDuration="300ms",A.imageEl.style.transform=`translate3d(0,0,0) scale(${i.scale})`}function L(){const e=t.zoom,i=t.params.zoom;if(!A.slideEl){t.params.virtual&&t.params.virtual.enabled&&t.virtual?A.slideEl=g(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:A.slideEl=t.slides[t.activeIndex];let e=A.slideEl.querySelector(`.${i.containerClass}`);e&&(e=e.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),A.imageEl=e,A.imageWrapEl=e?E(A.imageEl,`.${i.containerClass}`)[0]:void 0}A.imageEl&&A.imageWrapEl&&(t.params.cssMode&&(t.wrapperEl.style.overflow="",t.wrapperEl.style.touchAction=""),e.scale=1,p=1,A.imageWrapEl.style.transitionDuration="300ms",A.imageWrapEl.style.transform="translate3d(0,0,0)",A.imageEl.style.transitionDuration="300ms",A.imageEl.style.transform="translate3d(0,0,0) scale(1)",A.slideEl.classList.remove(`${i.zoomedSlideClass}`),A.slideEl=void 0,A.originX=0,A.originY=0)}function P(e){const i=t.zoom;i.scale&&1!==i.scale?L():z(e)}function D(){return{passiveListener:!!t.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!t.params.passiveListeners||{passive:!1,capture:!0}}}function I(){const e=t.zoom;if(e.enabled)return;e.enabled=!0;const{passiveListener:i,activeListenerWithCapture:s}=D();t.wrapperEl.addEventListener("pointerdown",x,i),t.wrapperEl.addEventListener("pointermove",S,s),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.addEventListener(e,T,i)})),t.wrapperEl.addEventListener("pointermove",k,s)}function F(){const e=t.zoom;if(!e.enabled)return;e.enabled=!1;const{passiveListener:i,activeListenerWithCapture:s}=D();t.wrapperEl.removeEventListener("pointerdown",x,i),t.wrapperEl.removeEventListener("pointermove",S,s),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.removeEventListener(e,T,i)})),t.wrapperEl.removeEventListener("pointermove",k,s)}Object.defineProperty(t.zoom,"scale",{get:()=>f,set(e){if(f!==e){const t=A.imageEl,i=A.slideEl;r("zoomChange",e,t,i)}f=e}}),s("init",(()=>{t.params.zoom.enabled&&I()})),s("destroy",(()=>{F()})),s("touchStart",((e,i)=>{t.zoom.enabled&&function(e){const i=t.device;if(!A.imageEl)return;if(m.isTouched)return;i.android&&e.cancelable&&e.preventDefault(),m.isTouched=!0;const s=u.length>0?u[0]:e;m.touchesStart.x=s.pageX,m.touchesStart.y=s.pageY}(i)})),s("touchEnd",((e,i)=>{t.zoom.enabled&&function(){const e=t.zoom;if(!A.imageEl)return;if(!m.isTouched||!m.isMoved)return m.isTouched=!1,void(m.isMoved=!1);m.isTouched=!1,m.isMoved=!1;let i=300,s=300;const r=h.x*i,a=m.currentX+r,n=h.y*s,o=m.currentY+n;0!==h.x&&(i=Math.abs((a-m.currentX)/h.x)),0!==h.y&&(s=Math.abs((o-m.currentY)/h.y));const l=Math.max(i,s);m.currentX=a,m.currentY=o;const p=m.width*e.scale,d=m.height*e.scale;m.minX=Math.min(A.slideWidth/2-p/2,0),m.maxX=-m.minX,m.minY=Math.min(A.slideHeight/2-d/2,0),m.maxY=-m.minY,m.currentX=Math.max(Math.min(m.currentX,m.maxX),m.minX),m.currentY=Math.max(Math.min(m.currentY,m.maxY),m.minY),A.imageWrapEl.style.transitionDuration=`${l}ms`,A.imageWrapEl.style.transform=`translate3d(${m.currentX}px, ${m.currentY}px,0)`}()})),s("doubleTap",((e,i)=>{!t.animating&&t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&P(i)})),s("transitionEnd",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&B()})),s("slideChange",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&t.params.cssMode&&B()})),Object.assign(t.zoom,{enable:I,disable:F,in:z,out:L,toggle:P})},function(e){let{swiper:t,extendParams:i,on:s}=e;function r(e,t){const i=function(){let e,t,i;return(s,r)=>{for(t=-1,e=s.length;e-t>1;)i=e+t>>1,s[i]<=r?t=i:e=i;return e}}();let s,r;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=i(this.x,e),s=r-1,(e-this.x[s])*(this.y[r]-this.y[s])/(this.x[r]-this.x[s])+this.y[s]):0},this}function a(){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)}i({controller:{control:void 0,inverse:!1,by:"slide"}}),t.controller={control:void 0},s("beforeInit",(()=>{if("undefined"!=typeof window&&("string"==typeof t.params.controller.control||t.params.controller.control instanceof HTMLElement)){const e=document.querySelector(t.params.controller.control);if(e&&e.swiper)t.controller.control=e.swiper;else if(e){const i=s=>{t.controller.control=s.detail[0],t.update(),e.removeEventListener("init",i)};e.addEventListener("init",i)}}else t.controller.control=t.params.controller.control})),s("update",(()=>{a()})),s("resize",(()=>{a()})),s("observerUpdate",(()=>{a()})),s("setTranslate",((e,i,s)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTranslate(i,s)})),s("setTransition",((e,i,s)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTransition(i,s)})),Object.assign(t.controller,{setTranslate:function(e,i){const s=t.controller.control;let a,n;const o=t.constructor;function l(e){if(e.destroyed)return;const i=t.rtlTranslate?-t.translate:t.translate;"slide"===t.params.controller.by&&(function(e){t.controller.spline=t.params.loop?new r(t.slidesGrid,e.slidesGrid):new r(t.snapGrid,e.snapGrid)}(e),n=-t.controller.spline.interpolate(-i)),n&&"container"!==t.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(t.maxTranslate()-t.minTranslate()),!Number.isNaN(a)&&Number.isFinite(a)||(a=1),n=(i-t.minTranslate())*a+e.minTranslate()),t.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,t),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(s))for(let e=0;e<s.length;e+=1)s[e]!==i&&s[e]instanceof o&&l(s[e]);else s instanceof o&&i!==s&&l(s)},setTransition:function(e,i){const s=t.constructor,r=t.controller.control;let a;function n(i){i.destroyed||(i.setTransition(e,t),0!==e&&(i.transitionStart(),i.params.autoHeight&&p((()=>{i.updateAutoHeight()})),x(i.wrapperEl,(()=>{r&&i.transitionEnd()}))))}if(Array.isArray(r))for(a=0;a<r.length;a+=1)r[a]!==i&&r[a]instanceof s&&n(r[a]);else r instanceof s&&i!==r&&n(r)}})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),t.a11y={clicked:!1};let r,n,o=null,l=(new Date).getTime();function p(e){const t=o;0!==t.length&&(t.innerHTML="",t.innerHTML=e)}function d(e){(e=T(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function c(e){(e=T(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function u(e,t){(e=T(e)).forEach((e=>{e.setAttribute("role",t)}))}function A(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function m(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function h(e){(e=T(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function w(e){(e=T(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function g(e){if(13!==e.keyCode&&32!==e.keyCode)return;const i=t.params.a11y,s=e.target;if(!t.pagination||!t.pagination.el||s!==t.pagination.el&&!t.pagination.el.contains(e.target)||e.target.matches(ae(t.params.pagination.bulletClass))){if(t.navigation&&t.navigation.prevEl&&t.navigation.nextEl){const e=T(t.navigation.prevEl);T(t.navigation.nextEl).includes(s)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?p(i.lastSlideMessage):p(i.nextSlideMessage)),e.includes(s)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?p(i.firstSlideMessage):p(i.prevSlideMessage))}t.pagination&&s.matches(ae(t.params.pagination.bulletClass))&&s.click()}}function f(){return t.pagination&&t.pagination.bullets&&t.pagination.bullets.length}function b(){return f()&&t.params.pagination.clickable}const C=(e,t,i)=>{d(e),"BUTTON"!==e.tagName&&(u(e,"button"),e.addEventListener("keydown",g)),m(e,i),function(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},E=e=>{n&&n!==e.target&&!n.contains(e.target)&&(r=!0),t.a11y.clicked=!0},x=()=>{r=!1,requestAnimationFrame((()=>{requestAnimationFrame((()=>{t.destroyed||(t.a11y.clicked=!1)}))}))},S=e=>{l=(new Date).getTime()},M=e=>{if(t.a11y.clicked)return;if((new Date).getTime()-l<100)return;const i=e.target.closest(`.${t.params.slideClass}, swiper-slide`);if(!i||!t.slides.includes(i))return;n=i;const s=t.slides.indexOf(i)===t.activeIndex,a=t.params.watchSlidesProgress&&t.visibleSlides&&t.visibleSlides.includes(i);s||a||e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents||(t.isHorizontal()?t.el.scrollLeft=0:t.el.scrollTop=0,requestAnimationFrame((()=>{r||(t.slideTo(t.slides.indexOf(i),0),r=!1)})))},k=()=>{const e=t.params.a11y;e.itemRoleDescriptionMessage&&A(t.slides,e.itemRoleDescriptionMessage),e.slideRole&&u(t.slides,e.slideRole);const i=t.slides.length;e.slideLabelMessage&&t.slides.forEach(((s,r)=>{const a=t.params.loop?parseInt(s.getAttribute("data-swiper-slide-index"),10):r;m(s,e.slideLabelMessage.replace(/\{\{index\}\}/,a+1).replace(/\{\{slidesLength\}\}/,i))}))};s("beforeInit",(()=>{o=v("span",t.params.a11y.notificationClass),o.setAttribute("aria-live","assertive"),o.setAttribute("aria-atomic","true")})),s("afterInit",(()=>{t.params.a11y.enabled&&(()=>{const e=t.params.a11y;t.el.append(o);const i=t.el;e.containerRoleDescriptionMessage&&A(i,e.containerRoleDescriptionMessage),e.containerMessage&&m(i,e.containerMessage);const s=t.wrapperEl,r=e.id||s.getAttribute("id")||`swiper-wrapper-${n=16,void 0===n&&(n=16),"x".repeat(n).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}`;var n;const l=t.params.autoplay&&t.params.autoplay.enabled?"off":"polite";var p;p=r,T(s).forEach((e=>{e.setAttribute("id",p)})),function(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(s,l),k();let{nextEl:d,prevEl:c}=t.navigation?t.navigation:{};d=T(d),c=T(c),d&&d.forEach((t=>C(t,r,e.nextSlideMessage))),c&&c.forEach((t=>C(t,r,e.prevSlideMessage))),b()&&T(t.pagination.el).forEach((e=>{e.addEventListener("keydown",g)})),a().addEventListener("visibilitychange",S),t.el.addEventListener("focus",M,!0),t.el.addEventListener("focus",M,!0),t.el.addEventListener("pointerdown",E,!0),t.el.addEventListener("pointerup",x,!0)})()})),s("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{t.params.a11y.enabled&&k()})),s("fromEdge toEdge afterInit lock unlock",(()=>{t.params.a11y.enabled&&function(){if(t.params.loop||t.params.rewind||!t.navigation)return;const{nextEl:e,prevEl:i}=t.navigation;i&&(t.isBeginning?(h(i),c(i)):(w(i),d(i))),e&&(t.isEnd?(h(e),c(e)):(w(e),d(e)))}()})),s("paginationUpdate",(()=>{t.params.a11y.enabled&&function(){const e=t.params.a11y;f()&&t.pagination.bullets.forEach((i=>{t.params.pagination.clickable&&(d(i),t.params.pagination.renderBullet||(u(i,"button"),m(i,e.paginationBulletMessage.replace(/\{\{index\}\}/,y(i)+1)))),i.matches(ae(t.params.pagination.bulletActiveClass))?i.setAttribute("aria-current","true"):i.removeAttribute("aria-current")}))}()})),s("destroy",(()=>{t.params.a11y.enabled&&function(){o&&o.remove();let{nextEl:e,prevEl:i}=t.navigation?t.navigation:{};e=T(e),i=T(i),e&&e.forEach((e=>e.removeEventListener("keydown",g))),i&&i.forEach((e=>e.removeEventListener("keydown",g))),b()&&T(t.pagination.el).forEach((e=>{e.removeEventListener("keydown",g)})),a().removeEventListener("visibilitychange",S),t.el.removeEventListener("focus",M,!0),t.el.removeEventListener("pointerdown",E,!0),t.el.removeEventListener("pointerup",x,!0)}()}))},function(e){let{swiper:t,extendParams:i,on:s}=e;i({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let r=!1,a={};const n=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),l=e=>{const t=o();let i;i=e?new URL(e):t.location;const s=i.pathname.slice(1).split("/").filter((e=>""!==e)),r=s.length;return{key:s[r-2],value:s[r-1]}},p=(e,i)=>{const s=o();if(!r||!t.params.history.enabled)return;let a;a=t.params.url?new URL(t.params.url):s.location;const l=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${i}"]`):t.slides[i];let p=n(l.getAttribute("data-history"));if(t.params.history.root.length>0){let i=t.params.history.root;"/"===i[i.length-1]&&(i=i.slice(0,i.length-1)),p=`${i}/${e?`${e}/`:""}${p}`}else a.pathname.includes(e)||(p=`${e?`${e}/`:""}${p}`);t.params.history.keepQuery&&(p+=a.search);const d=s.history.state;d&&d.value===p||(t.params.history.replaceState?s.history.replaceState({value:p},null,p):s.history.pushState({value:p},null,p))},d=(e,i,s)=>{if(i)for(let r=0,a=t.slides.length;r<a;r+=1){const a=t.slides[r];if(n(a.getAttribute("data-history"))===i){const i=t.getSlideIndex(a);t.slideTo(i,e,s)}}else t.slideTo(0,e,s)},c=()=>{a=l(t.params.url),d(t.params.speed,a.value,!1)};s("init",(()=>{t.params.history.enabled&&(()=>{const e=o();if(t.params.history){if(!e.history||!e.history.pushState)return t.params.history.enabled=!1,void(t.params.hashNavigation.enabled=!0);r=!0,a=l(t.params.url),a.key||a.value?(d(0,a.value,t.params.runCallbacksOnInit),t.params.history.replaceState||e.addEventListener("popstate",c)):t.params.history.replaceState||e.addEventListener("popstate",c)}})()})),s("destroy",(()=>{t.params.history.enabled&&(()=>{const e=o();t.params.history.replaceState||e.removeEventListener("popstate",c)})()})),s("transitionEnd _freeModeNoMomentumRelease",(()=>{r&&p(t.params.history.key,t.activeIndex)})),s("slideChange",(()=>{r&&t.params.cssMode&&p(t.params.history.key,t.activeIndex)}))},function(e){let{swiper:t,extendParams:i,emit:s,on:r}=e,n=!1;const l=a(),p=o();i({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(e,i){if(t.virtual&&t.params.virtual.enabled){const e=t.slides.filter((e=>e.getAttribute("data-hash")===i))[0];return e?parseInt(e.getAttribute("data-swiper-slide-index"),10):0}return t.getSlideIndex(g(t.slidesEl,`.${t.params.slideClass}[data-hash="${i}"], swiper-slide[data-hash="${i}"]`)[0])}}});const d=()=>{s("hashChange");const e=l.location.hash.replace("#",""),i=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex];if(e!==(i?i.getAttribute("data-hash"):"")){const i=t.params.hashNavigation.getSlideIndex(t,e);if(void 0===i||Number.isNaN(i))return;t.slideTo(i)}},c=()=>{if(!n||!t.params.hashNavigation.enabled)return;const e=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex],i=e?e.getAttribute("data-hash")||e.getAttribute("data-history"):"";t.params.hashNavigation.replaceState&&p.history&&p.history.replaceState?(p.history.replaceState(null,null,`#${i}`||""),s("hashSet")):(l.location.hash=i||"",s("hashSet"))};r("init",(()=>{t.params.hashNavigation.enabled&&(()=>{if(!t.params.hashNavigation.enabled||t.params.history&&t.params.history.enabled)return;n=!0;const e=l.location.hash.replace("#","");if(e){const i=0,s=t.params.hashNavigation.getSlideIndex(t,e);t.slideTo(s||0,i,t.params.runCallbacksOnInit,!0)}t.params.hashNavigation.watchState&&p.addEventListener("hashchange",d)})()})),r("destroy",(()=>{t.params.hashNavigation.enabled&&t.params.hashNavigation.watchState&&p.removeEventListener("hashchange",d)})),r("transitionEnd _freeModeNoMomentumRelease",(()=>{n&&c()})),r("slideChange",(()=>{n&&t.params.cssMode&&c()}))},function(e){let t,i,{swiper:s,extendParams:r,on:n,emit:o,params:l}=e;s.autoplay={running:!1,paused:!1,timeLeft:0},r({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let p,d,c,u,A,m,h,w,g=l&&l.autoplay?l.autoplay.delay:3e3,f=l&&l.autoplay?l.autoplay.delay:3e3,v=(new Date).getTime();function b(e){s&&!s.destroyed&&s.wrapperEl&&e.target===s.wrapperEl&&(s.wrapperEl.removeEventListener("transitionend",b),w||T())}const C=()=>{if(s.destroyed||!s.autoplay.running)return;s.autoplay.paused?d=!0:d&&(f=p,d=!1);const e=s.autoplay.paused?p:v+f-(new Date).getTime();s.autoplay.timeLeft=e,o("autoplayTimeLeft",e,e/g),i=requestAnimationFrame((()=>{C()}))},y=e=>{if(s.destroyed||!s.autoplay.running)return;cancelAnimationFrame(i),C();let r=void 0===e?s.params.autoplay.delay:e;g=s.params.autoplay.delay,f=s.params.autoplay.delay;const a=(()=>{let e;if(e=s.virtual&&s.params.virtual.enabled?s.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]:s.slides[s.activeIndex],e)return parseInt(e.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(a)&&a>0&&void 0===e&&(r=a,g=a,f=a),p=r;const n=s.params.speed,l=()=>{s&&!s.destroyed&&(s.params.autoplay.reverseDirection?!s.isBeginning||s.params.loop||s.params.rewind?(s.slidePrev(n,!0,!0),o("autoplay")):s.params.autoplay.stopOnLastSlide||(s.slideTo(s.slides.length-1,n,!0,!0),o("autoplay")):!s.isEnd||s.params.loop||s.params.rewind?(s.slideNext(n,!0,!0),o("autoplay")):s.params.autoplay.stopOnLastSlide||(s.slideTo(0,n,!0,!0),o("autoplay")),s.params.cssMode&&(v=(new Date).getTime(),requestAnimationFrame((()=>{y()}))))};return r>0?(clearTimeout(t),t=setTimeout((()=>{l()}),r)):requestAnimationFrame((()=>{l()})),r},E=()=>{v=(new Date).getTime(),s.autoplay.running=!0,y(),o("autoplayStart")},x=()=>{s.autoplay.running=!1,clearTimeout(t),cancelAnimationFrame(i),o("autoplayStop")},S=(e,i)=>{if(s.destroyed||!s.autoplay.running)return;clearTimeout(t),e||(h=!0);const r=()=>{o("autoplayPause"),s.params.autoplay.waitForTransition?s.wrapperEl.addEventListener("transitionend",b):T()};if(s.autoplay.paused=!0,i)return m&&(p=s.params.autoplay.delay),m=!1,void r();const a=p||s.params.autoplay.delay;p=a-((new Date).getTime()-v),s.isEnd&&p<0&&!s.params.loop||(p<0&&(p=0),r())},T=()=>{s.isEnd&&p<0&&!s.params.loop||s.destroyed||!s.autoplay.running||(v=(new Date).getTime(),h?(h=!1,y(p)):y(),s.autoplay.paused=!1,o("autoplayResume"))},M=()=>{if(s.destroyed||!s.autoplay.running)return;const e=a();"hidden"===e.visibilityState&&(h=!0,S(!0)),"visible"===e.visibilityState&&T()},k=e=>{"mouse"===e.pointerType&&(h=!0,w=!0,s.animating||s.autoplay.paused||S(!0))},B=e=>{"mouse"===e.pointerType&&(w=!1,s.autoplay.paused&&T())};n("init",(()=>{s.params.autoplay.enabled&&(s.params.autoplay.pauseOnMouseEnter&&(s.el.addEventListener("pointerenter",k),s.el.addEventListener("pointerleave",B)),a().addEventListener("visibilitychange",M),E())})),n("destroy",(()=>{s.el.removeEventListener("pointerenter",k),s.el.removeEventListener("pointerleave",B),a().removeEventListener("visibilitychange",M),s.autoplay.running&&x()})),n("_freeModeStaticRelease",(()=>{(u||h)&&T()})),n("_freeModeNoMomentumRelease",(()=>{s.params.autoplay.disableOnInteraction?x():S(!0,!0)})),n("beforeTransitionStart",((e,t,i)=>{!s.destroyed&&s.autoplay.running&&(i||!s.params.autoplay.disableOnInteraction?S(!0,!0):x())})),n("sliderFirstMove",(()=>{!s.destroyed&&s.autoplay.running&&(s.params.autoplay.disableOnInteraction?x():(c=!0,u=!1,h=!1,A=setTimeout((()=>{h=!0,u=!0,S(!0)}),200)))})),n("touchEnd",(()=>{if(!s.destroyed&&s.autoplay.running&&c){if(clearTimeout(A),clearTimeout(t),s.params.autoplay.disableOnInteraction)return u=!1,void(c=!1);u&&s.params.cssMode&&T(),u=!1,c=!1}})),n("slideChange",(()=>{!s.destroyed&&s.autoplay.running&&(m=!0)})),Object.assign(s.autoplay,{start:E,stop:x,pause:S,resume:T})},oe,le,function(e){let t,i,s,r,{swiper:a,extendParams:n,on:o}=e;n({grid:{rows:1,fill:"column"}});const l=()=>{let e=a.params.spaceBetween;return"string"==typeof e&&e.indexOf("%")>=0?e=parseFloat(e.replace("%",""))/100*a.size:"string"==typeof e&&(e=parseFloat(e)),e};o("init",(()=>{r=a.params.grid&&a.params.grid.rows>1})),o("update",(()=>{const{params:e,el:t}=a,i=e.grid&&e.grid.rows>1;r&&!i?(t.classList.remove(`${e.containerModifierClass}grid`,`${e.containerModifierClass}grid-column`),s=1,a.emitContainerClasses()):!r&&i&&(t.classList.add(`${e.containerModifierClass}grid`),"column"===e.grid.fill&&t.classList.add(`${e.containerModifierClass}grid-column`),a.emitContainerClasses()),r=i})),a.grid={initSlides:e=>{const{slidesPerView:r}=a.params,{rows:n,fill:o}=a.params.grid,l=a.virtual&&a.params.virtual.enabled?a.virtual.slides.length:e.length;s=Math.floor(l/n),t=Math.floor(l/n)===l/n?l:Math.ceil(l/n)*n,"auto"!==r&&"row"===o&&(t=Math.max(t,r*n)),i=t/n},unsetSlides:()=>{a.slides&&a.slides.forEach((e=>{e.swiperSlideGridSet&&(e.style.height="",e.style[a.getDirectionLabel("margin-top")]="")}))},updateSlide:(e,r,n)=>{const{slidesPerGroup:o}=a.params,p=l(),{rows:d,fill:c}=a.params.grid,u=a.virtual&&a.params.virtual.enabled?a.virtual.slides.length:n.length;let A,m,h;if("row"===c&&o>1){const i=Math.floor(e/(o*d)),s=e-d*o*i,a=0===i?o:Math.min(Math.ceil((u-i*d*o)/d),o);h=Math.floor(s/a),m=s-h*a+i*o,A=m+h*t/d,r.style.order=A}else"column"===c?(m=Math.floor(e/d),h=e-m*d,(m>s||m===s&&h===d-1)&&(h+=1,h>=d&&(h=0,m+=1))):(h=Math.floor(e/i),m=e-h*i);r.row=h,r.column=m,r.style.height=`calc((100% - ${(d-1)*p}px) / ${d})`,r.style[a.getDirectionLabel("margin-top")]=0!==h?p&&`${p}px`:"",r.swiperSlideGridSet=!0},updateWrapperSize:(e,i)=>{const{centeredSlides:s,roundLengths:r}=a.params,n=l(),{rows:o}=a.params.grid;if(a.virtualSize=(e+n)*t,a.virtualSize=Math.ceil(a.virtualSize/o)-n,a.params.cssMode||(a.wrapperEl.style[a.getDirectionLabel("width")]=`${a.virtualSize+n}px`),s){const e=[];for(let t=0;t<i.length;t+=1){let s=i[t];r&&(s=Math.floor(s)),i[t]<a.virtualSize+i[0]&&e.push(s)}i.splice(0,i.length),i.push(...e)}}}},me,function(e){let{swiper:t,extendParams:i,on:s}=e;i({fadeEffect:{crossFade:!1}}),he({effect:"fade",swiper:t,on:s,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let i=0;i<e.length;i+=1){const e=t.slides[i];let s=-e.swiperSlideOffset;t.params.virtualTranslate||(s-=t.translate);let r=0;t.isHorizontal()||(r=s,s=0);const a=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),n=we(0,e);n.style.opacity=a,n.style.transform=`translate3d(${s}px, ${r}px, 0px)`}},setTransition:e=>{const i=t.slides.map((e=>w(e)));i.forEach((t=>{t.style.transitionDuration=`${e}ms`})),ge({swiper:t,duration:e,transformElements:i,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const r=(e,t,i)=>{let s=i?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),r=i?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");s||(s=v("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(i?"left":"top")).split(" ")),e.append(s)),r||(r=v("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(i?"right":"bottom")).split(" ")),e.append(r)),s&&(s.style.opacity=Math.max(-t,0)),r&&(r.style.opacity=Math.max(t,0))};he({effect:"cube",swiper:t,on:s,setTranslate:()=>{const{el:e,wrapperEl:i,slides:s,width:a,height:n,rtlTranslate:o,size:l,browser:p}=t,d=t.params.cubeEffect,c=t.isHorizontal(),u=t.virtual&&t.params.virtual.enabled;let A,m=0;d.shadow&&(c?(A=t.wrapperEl.querySelector(".swiper-cube-shadow"),A||(A=v("div","swiper-cube-shadow"),t.wrapperEl.append(A)),A.style.height=`${a}px`):(A=e.querySelector(".swiper-cube-shadow"),A||(A=v("div","swiper-cube-shadow"),e.append(A))));for(let e=0;e<s.length;e+=1){const i=s[e];let a=e;u&&(a=parseInt(i.getAttribute("data-swiper-slide-index"),10));let n=90*a,p=Math.floor(n/360);o&&(n=-n,p=Math.floor(-n/360));const A=Math.max(Math.min(i.progress,1),-1);let h=0,w=0,g=0;a%4==0?(h=4*-p*l,g=0):(a-1)%4==0?(h=0,g=4*-p*l):(a-2)%4==0?(h=l+4*p*l,g=l):(a-3)%4==0&&(h=-l,g=3*l+4*l*p),o&&(h=-h),c||(w=h,h=0);const f=`rotateX(${c?0:-n}deg) rotateY(${c?n:0}deg) translate3d(${h}px, ${w}px, ${g}px)`;A<=1&&A>-1&&(m=90*a+90*A,o&&(m=90*-a-90*A),t.browser&&t.browser.need3dFix&&Math.abs(m)/90%2==1&&(m+=.001)),i.style.transform=f,d.slideShadows&&r(i,A,c)}if(i.style.transformOrigin=`50% 50% -${l/2}px`,i.style["-webkit-transform-origin"]=`50% 50% -${l/2}px`,d.shadow)if(c)A.style.transform=`translate3d(0px, ${a/2+d.shadowOffset}px, ${-a/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${d.shadowScale})`;else{const e=Math.abs(m)-90*Math.floor(Math.abs(m)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),i=d.shadowScale,s=d.shadowScale/t,r=d.shadowOffset;A.style.transform=`scale3d(${i}, 1, ${s}) translate3d(0px, ${n/2+r}px, ${-n/2/s}px) rotateX(-89.99deg)`}const h=(p.isSafari||p.isWebView)&&p.needPerspectiveFix?-l/2:0;i.style.transform=`translate3d(0px,0,${h}px) rotateX(${t.isHorizontal()?0:m}deg) rotateY(${t.isHorizontal()?-m:0}deg)`,i.style.setProperty("--swiper-cube-translate-z",`${h}px`)},setTransition:e=>{const{el:i,slides:s}=t;if(s.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),t.params.cubeEffect.shadow&&!t.isHorizontal()){const t=i.querySelector(".swiper-cube-shadow");t&&(t.style.transitionDuration=`${e}ms`)}},recreateShadows:()=>{const e=t.isHorizontal();t.slides.forEach((t=>{const i=Math.max(Math.min(t.progress,1),-1);r(t,i,e)}))},getEffectParams:()=>t.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({flipEffect:{slideShadows:!0,limitRotation:!0}});const r=(e,i)=>{let s=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),r=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");s||(s=fe("flip",e,t.isHorizontal()?"left":"top")),r||(r=fe("flip",e,t.isHorizontal()?"right":"bottom")),s&&(s.style.opacity=Math.max(-i,0)),r&&(r.style.opacity=Math.max(i,0))};he({effect:"flip",swiper:t,on:s,setTranslate:()=>{const{slides:e,rtlTranslate:i}=t,s=t.params.flipEffect;for(let a=0;a<e.length;a+=1){const n=e[a];let o=n.progress;t.params.flipEffect.limitRotation&&(o=Math.max(Math.min(n.progress,1),-1));const l=n.swiperSlideOffset;let p=-180*o,d=0,c=t.params.cssMode?-l-t.translate:-l,u=0;t.isHorizontal()?i&&(p=-p):(u=c,c=0,d=-p,p=0),t.browser&&t.browser.need3dFix&&(Math.abs(p)/90%2==1&&(p+=.001),Math.abs(d)/90%2==1&&(d+=.001)),n.style.zIndex=-Math.abs(Math.round(o))+e.length,s.slideShadows&&r(n,o);const A=`translate3d(${c}px, ${u}px, 0px) rotateX(${d}deg) rotateY(${p}deg)`;we(0,n).style.transform=A}},setTransition:e=>{const i=t.slides.map((e=>w(e)));i.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),ge({swiper:t,duration:e,transformElements:i})},recreateShadows:()=>{t.params.flipEffect,t.slides.forEach((e=>{let i=e.progress;t.params.flipEffect.limitRotation&&(i=Math.max(Math.min(e.progress,1),-1)),r(e,i)}))},getEffectParams:()=>t.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),he({effect:"coverflow",swiper:t,on:s,setTranslate:()=>{const{width:e,height:i,slides:s,slidesSizesGrid:r}=t,a=t.params.coverflowEffect,n=t.isHorizontal(),o=t.translate,l=n?e/2-o:i/2-o,p=n?a.rotate:-a.rotate,d=a.depth;for(let e=0,i=s.length;e<i;e+=1){const i=s[e],o=r[e],c=(l-i.swiperSlideOffset-o/2)/o,u="function"==typeof a.modifier?a.modifier(c):c*a.modifier;let A=n?p*u:0,m=n?0:p*u,h=-d*Math.abs(u),w=a.stretch;"string"==typeof w&&-1!==w.indexOf("%")&&(w=parseFloat(a.stretch)/100*o);let g=n?0:w*u,f=n?w*u:0,v=1-(1-a.scale)*Math.abs(u);Math.abs(f)<.001&&(f=0),Math.abs(g)<.001&&(g=0),Math.abs(h)<.001&&(h=0),Math.abs(A)<.001&&(A=0),Math.abs(m)<.001&&(m=0),Math.abs(v)<.001&&(v=0),t.browser&&t.browser.need3dFix&&(Math.abs(A)/90%2==1&&(A+=.001),Math.abs(m)/90%2==1&&(m+=.001));const b=`translate3d(${f}px,${g}px,${h}px)  rotateX(${m}deg) rotateY(${A}deg) scale(${v})`;if(we(0,i).style.transform=b,i.style.zIndex=1-Math.abs(Math.round(u)),a.slideShadows){let e=n?i.querySelector(".swiper-slide-shadow-left"):i.querySelector(".swiper-slide-shadow-top"),t=n?i.querySelector(".swiper-slide-shadow-right"):i.querySelector(".swiper-slide-shadow-bottom");e||(e=fe("coverflow",i,n?"left":"top")),t||(t=fe("coverflow",i,n?"right":"bottom")),e&&(e.style.opacity=u>0?u:0),t&&(t.style.opacity=-u>0?-u:0)}}},setTransition:e=>{t.slides.map((e=>w(e))).forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const r=e=>"string"==typeof e?e:`${e}px`;he({effect:"creative",swiper:t,on:s,setTranslate:()=>{const{slides:e,wrapperEl:i,slidesSizesGrid:s}=t,a=t.params.creativeEffect,{progressMultiplier:n}=a,o=t.params.centeredSlides;if(o){const e=s[0]/2-t.params.slidesOffsetBefore||0;i.style.transform=`translateX(calc(50% - ${e}px))`}for(let i=0;i<e.length;i+=1){const s=e[i],l=s.progress,p=Math.min(Math.max(s.progress,-a.limitProgress),a.limitProgress);let d=p;o||(d=Math.min(Math.max(s.originalProgress,-a.limitProgress),a.limitProgress));const c=s.swiperSlideOffset,u=[t.params.cssMode?-c-t.translate:-c,0,0],A=[0,0,0];let m=!1;t.isHorizontal()||(u[1]=u[0],u[0]=0);let h={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};p<0?(h=a.next,m=!0):p>0&&(h=a.prev,m=!0),u.forEach(((e,t)=>{u[t]=`calc(${e}px + (${r(h.translate[t])} * ${Math.abs(p*n)}))`})),A.forEach(((e,i)=>{let s=h.rotate[i]*Math.abs(p*n);t.browser&&t.browser.need3dFix&&Math.abs(s)/90%2==1&&(s+=.001),A[i]=s})),s.style.zIndex=-Math.abs(Math.round(l))+e.length;const w=u.join(", "),g=`rotateX(${A[0]}deg) rotateY(${A[1]}deg) rotateZ(${A[2]}deg)`,f=d<0?`scale(${1+(1-h.scale)*d*n})`:`scale(${1-(1-h.scale)*d*n})`,v=d<0?1+(1-h.opacity)*d*n:1-(1-h.opacity)*d*n,b=`translate3d(${w}) ${g} ${f}`;if(m&&h.shadow||!m){let e=s.querySelector(".swiper-slide-shadow");if(!e&&h.shadow&&(e=fe("creative",s)),e){const t=a.shadowPerProgress?p*(1/a.limitProgress):p;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const C=we(0,s);C.style.transform=b,C.style.opacity=v,h.origin&&(C.style.transformOrigin=h.origin)}},setTransition:e=>{const i=t.slides.map((e=>w(e)));i.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),ge({swiper:t,duration:e,transformElements:i,allSlides:!0})},perspective:()=>t.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),he({effect:"cards",swiper:t,on:s,setTranslate:()=>{const{slides:e,activeIndex:i,rtlTranslate:s}=t,r=t.params.cardsEffect,{startTranslate:a,isTouched:n}=t.touchEventsData,o=s?-t.translate:t.translate;for(let l=0;l<e.length;l+=1){const p=e[l],d=p.progress,c=Math.min(Math.max(d,-4),4);let u=p.swiperSlideOffset;t.params.centeredSlides&&!t.params.cssMode&&(t.wrapperEl.style.transform=`translateX(${t.minTranslate()}px)`),t.params.centeredSlides&&t.params.cssMode&&(u-=e[0].swiperSlideOffset);let A=t.params.cssMode?-u-t.translate:-u,m=0;const h=-100*Math.abs(c);let w=1,g=-r.perSlideRotate*c,f=r.perSlideOffset-.75*Math.abs(c);const v=t.virtual&&t.params.virtual.enabled?t.virtual.from+l:l,b=(v===i||v===i-1)&&c>0&&c<1&&(n||t.params.cssMode)&&o<a,C=(v===i||v===i+1)&&c<0&&c>-1&&(n||t.params.cssMode)&&o>a;if(b||C){const e=(1-Math.abs((Math.abs(c)-.5)/.5))**.5;g+=-28*c*e,w+=-.5*e,f+=96*e,m=-25*e*Math.abs(c)+"%"}if(A=c<0?`calc(${A}px ${s?"-":"+"} (${f*Math.abs(c)}%))`:c>0?`calc(${A}px ${s?"-":"+"} (-${f*Math.abs(c)}%))`:`${A}px`,!t.isHorizontal()){const e=m;m=A,A=e}const y=c<0?""+(1+(1-w)*c):""+(1-(1-w)*c),E=`\n        translate3d(${A}, ${m}, ${h}px)\n        rotateZ(${r.rotate?s?-g:g:0}deg)\n        scale(${y})\n      `;if(r.slideShadows){let e=p.querySelector(".swiper-slide-shadow");e||(e=fe("cards",p)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(c)-.5)/.5,0),1))}p.style.zIndex=-Math.abs(Math.round(d))+e.length,we(0,p).style.transform=E}},setTransition:e=>{const i=t.slides.map((e=>w(e)));i.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),ge({swiper:t,duration:e,transformElements:i})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})}];ie.use(ve);var be=i(72),Ce=i.n(be),ye=i(825),Ee=i.n(ye),xe=i(659),Se=i.n(xe),Te=i(56),Me=i.n(Te),ke=i(540),Be=i.n(ke),ze=i(113),Le=i.n(ze),Pe=i(105),De={};De.styleTagTransform=Le(),De.setAttributes=Me(),De.insert=Se().bind(null,"head"),De.domAPI=Ee(),De.insertStyleElement=Be(),Ce()(Pe.A,De),Pe.A&&Pe.A.locals&&Pe.A.locals,document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelector(".features__images-swiper"),t=document.querySelector(".features__content-swiper"),i=new ie(t,{loop:!0,slidesPerView:1,modules:[re,ne,oe,le,me],pagination:{el:".features__content-swiper .swiper-pagination",clickable:!0},speed:800}),s=new ie(e,{loop:!0,slidesPerView:1,modules:[re,ne,oe,le,me],pagination:{el:".features__images-swiper .swiper-pagination",clickable:!0},speed:800,controller:{control:i}});e&&s.init(),t&&i.init();const r=[...document.querySelectorAll(".features__big-titles h3")];let a,n=document.querySelector(".features__big-titles h3.accent"),o=document.querySelector(".features__right-wrapper .feature__desktop-slide.is-shown");const l=document.querySelectorAll(".features__right-wrapper .feature__desktop-slide");r.forEach((e=>{e.addEventListener("mouseenter",(function(){r.forEach((e=>e.classList.remove("accent"))),l.forEach((e=>e.classList.remove("is-shown"))),this.classList.add("accent"),n=this;const e=this.textContent.trim().toLowerCase(),t=document.querySelector('.feature__desktop-slide[data-id="'.concat(e,'"]'));t.classList.add("is-shown"),o=t,clearInterval(a),a=setInterval((()=>{const e=r.findIndex((e=>e===n)),t=(e+1)%r.length,i=r[t];r.forEach((e=>e.classList.remove("accent"))),l.forEach((e=>e.classList.remove("is-shown"))),i.classList.add("accent"),n=i;const s=i.textContent.trim().toLowerCase(),a=document.querySelector('.feature__desktop-slide[data-id="'.concat(s,'"]'));a.classList.add("is-shown"),o=a}),3e3)}))})),a=setInterval((()=>{const e=(r.findIndex((e=>e===n))+1)%r.length,t=r[e];r.forEach((e=>e.classList.remove("accent"))),l.forEach((e=>e.classList.remove("is-shown"))),t.classList.add("accent"),n=t;const i=t.textContent.trim().toLowerCase(),s=document.querySelector('.feature__desktop-slide[data-id="'.concat(i,'"]'));s.classList.add("is-shown"),o=s}),3e3),document.querySelectorAll(".cases__item"),window.addEventListener("scroll",(function(){var e,t=window.pageYOffset;t>=0&&t<m?(e=c,d.classList.remove("fixed"),e.classList.remove("absolute"),b(d),b(c),b(u)):window.pageYOffset>=m&&window.pageYOffset<h?(f(d),v(d),b(c)):window.pageYOffset>=h&&window.pageYOffset<w?(f(c),v(c),b(u)):window.pageYOffset>=w&&window.pageYOffset<g?(f(u),v(u)):0===t&&(b(d),b(c),b(u))}),!1);var p=document.querySelector(".features"),d=document.querySelector("#case-1");d.querySelector(".cases__container");var c=document.querySelector("#case-2");c.querySelector("cases__container");var u=document.querySelector("#case-3");u.querySelector("cases__container");var A=document.querySelector("#case-4"),m=(document.querySelector(".insights"),getComputedStyle(p).height.split("px")[0],getComputedStyle(d).height.split("px")[0],getComputedStyle(c).height.split("px")[0],getComputedStyle(u).height.split("px")[0],getComputedStyle(A).height.split("px")[0],d.getBoundingClientRect().top),h=c.getBoundingClientRect().top,w=u.getBoundingClientRect().top,g=A.getBoundingClientRect().top;function f(e){e.classList.add("fixed")}function v(e){e.classList.add("background-grey")}function b(e){e.classList.remove("background-grey")}const C=document.querySelectorAll(".burger-menu__sidemenu [data-menu]"),y=document.querySelectorAll(".burger-menu__main [data-id]"),E=document.querySelector(".burger-button"),x=(document.querySelector(".burger-button__close"),document.querySelector(".burger-menu")),S=document.querySelector("main"),T=document.querySelector("header");E.addEventListener("click",(function(e){E.classList.toggle("close"),x.classList.toggle("open"),S.classList.toggle("menu-open"),T.classList.toggle("menu-open"),C.forEach((e=>{e.classList.remove("hovered")})),y.forEach((e=>{e.classList.remove("hovered"),e.classList.remove("other-hovered"),e.classList.remove("submenu-shown")}))})),document.querySelector(".burger-menu");const M=document.querySelectorAll(".burger-menu__main  a");window.matchMedia("(max-width: 768px)").matches&&M.forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault(),t.target===e?(M.forEach((e=>{e.parentElement.classList.remove("submenu-shown")})),e.parentElement.classList.add("submenu-shown")):e.parentElement.classList.remove("submenu-shown")}))})),y.forEach((e=>{e.addEventListener("mouseover",(function(){y.forEach((t=>{t!==e?(t.classList.add("other-hovered"),t.classList.remove("hovered")):(t.classList.add("hovered"),t.classList.remove("other-hovered"))}));const t=this.getAttribute("data-id");C.forEach((i=>{i.getAttribute("data-menu")===t?(i.classList.add("hovered"),e.classList.add("hovered")):(i.classList.remove("hovered"),e.classList.remove("hovered"))}))}))})),document.querySelectorAll(".container").forEach((e=>{const t=e.querySelectorAll(".parallax"),i=e.querySelectorAll(".parallax1"),s=e.querySelectorAll(".parallax2");window.addEventListener("scroll",(()=>{const r=e.getBoundingClientRect();r.top<=100&&(t.forEach((e=>{const t=Math.round(.1*r.top);e.style.transform="translateY("+t+"px)",e.style.transition="transform 0.5s linear"})),i.forEach((e=>{const t=Math.round(.02*r.top);e.style.transform="translateY("+t+"px)",e.style.transition="transform 0.5s linear"})),s.forEach((e=>{const t=Math.round(.04*r.top);e.style.transform="translateY("+t+"px)",e.style.transition="transform 0.5s linear"})))}),!1)})),document.querySelectorAll("div.splitText").forEach((e=>{const t=[],i=e=>{if(e.textContent)return e.textContent.trim().split(" ").map((e=>{const t=e.split("").map((e=>{if(""!==e)return'<span class="letter">'.concat(e,"</span>")})).join("");return'<div class="word">'.concat(t,"</div>")})).join(" ")};e.childNodes.forEach((e=>{"#text"===e.nodeName&&t.push(i(e)),"BR"===e.tagName||(e.innerHTML=i(e)),t.push(e.outerHTML)})),e.innerHTML=t.join(""),e.querySelectorAll(".letter").forEach(((e,t)=>{e.style.transitionDelay=.03*t+"s"})),new IntersectionObserver(((e,t)=>{e.forEach((e=>{if(e.isIntersecting){const i=e.target;i.classList.add("is-visible"),t.unobserve(i)}}))}),{rootMargin:"-10%"}).observe(e)})),document.querySelectorAll(".ticker__content").forEach((e=>{let t=0;const i=function(i,s){let r=0;return function(){const i=(new Date).getTime();i-r<1e3||(r=i,function(){const i=window.pageYOffset||document.documentElement.scrollTop;i>t?(e.parentElement.classList.contains("ticker--features")&&(e.style.animationDuration="10s",e.style.animationDirection="normal",setTimeout((()=>{e.style.animationDuration="17s",e.style.animationDirection="normal"}),500)),e.parentElement.classList.contains("ticker--air-date")&&(e.style.animationDuration="16s",e.style.animationDirection="normal",setTimeout((()=>{e.style.animationDuration="17s",e.style.animationDirection="normal"}),500))):(e.parentElement.classList.contains("ticker--features")&&(e.style.animationDirection="reverse",e.style.animationDuration="20s",setTimeout((()=>{e.style.animationDirection="normal",e.style.animationDuration="17s"}),500)),e.parentElement.classList.contains("ticker--air-date")&&(e.style.animationDirection="reverse",e.style.animationDuration="18s",setTimeout((()=>{e.style.animationDirection="normal",e.style.animationDuration="17s"}),500))),t=i<=0?0:i}(...arguments))}}();window.addEventListener("scroll",i)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,